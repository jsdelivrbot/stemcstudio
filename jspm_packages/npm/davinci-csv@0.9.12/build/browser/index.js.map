{"version":3,"file":"index.js","sources":["../../src/lib/CSV.ts","../../src/lib/messages.ts","../../src/lib/CSVError.ts"],"sourcesContent":["import { CSVError } from './CSVError';\nimport { messages, ErrorCode } from './messages';\n/**\n * A field in a comma-separated file is either a number, a string, or null.\n */\nexport type Field = number | string | null;\n\n/**\n * A format for relational data.\n */\nexport interface Data {\n    fields: { id: string }[];\n    records: { [fieldId: string]: Field }[];\n}\n\n/**\n * Options used for customizing parsing and serialization.\n */\nexport interface Dialect {\n    /**\n     * Specifies the delimiter between fields.\n     * Default is the comma, </code>','</code>.\n     * Used for parsing and serialization.\n     */\n    fieldDelimiter?: ',' | ';';\n\n    /**\n     * Determines whether embedded quotation marks in strings are escaped during <em>serialization</em> by doubling them.\n     * Default is <code>true</code>.\n     */\n    escapeEmbeddedQuotes?: boolean;\n\n    /**\n     * Specifies the character used to terminate a line.\n     * Default is a single newline character, <code>'\\n'</code>.\n     * Used for parsing and serialization.\n     */\n    lineTerminator?: '\\n' | '\\r' | '\\r\\n';\n\n    /**\n     * The character used for quoting string fields.\n     * Default is the double quote, <code>'\"'</code>.\n     * Used for parsing and serialization.\n     */\n    quoteChar?: '\"' | \"'\";\n\n    /**\n     * Skips the specified number of initial rows during <em>parsing</em>.\n     * Default is zero, <code>0</code>.\n     */\n    skipInitialRows?: number;\n\n    /**\n     * Determines whether fields are trimmed during <em>parsing</em>.\n     * Default is <code>true</code>.\n     */\n    trimFields?: boolean;\n}\n\nconst COMMA = ',';\nconst SEMICOLON = ';';\n\nconst CR = '\\r';\nconst LF = '\\n';\nconst CRLF = CR + LF;\nconst APOS = \"'\";\nconst QUOTE = '\"';\nconst SPACE = ' ';\nconst MINUS = '-';\nconst PLUS = '+';\n\nenum CsvState {\n    START = 0,\n    INTEGER = 1,\n    DECIMAL = 2,\n    SCIENTIFIC = 3,\n    APOS_STRING = 4,\n    APOS_ESCAPE = 5,\n    QUOTE_STRING = 6,\n    QUOTE_ESCAPE = 7,\n    /**\n     * We've just seen the delimiter, usually a comma or a semicolon.\n     */\n    DELIM = 8,\n    ISO8601_HHMM = 9,\n    UNQUOTED_STRING = 10,\n    EXPONENT = 11,\n    SIGNED_EXPONENT = 12,\n    NEGATIVE_INTEGER = 13,\n    TRAILING_WHITESPACE = 14\n}\n\nfunction decodeState(state: CsvState): string {\n    switch (state) {\n        case CsvState.START: return \"START\";\n        case CsvState.INTEGER: return \"INTEGER\";\n        case CsvState.DECIMAL: return \"DECIMAL\";\n        case CsvState.SCIENTIFIC: return \"SCIENTIFIC\";\n        case CsvState.APOS_STRING: return \"APOS_STRING\";\n        case CsvState.APOS_ESCAPE: return \"APOS_ESCAPE\";\n        case CsvState.QUOTE_STRING: return \"QUOTE_STRING\";\n        case CsvState.QUOTE_ESCAPE: return \"QUOTE_ESCAPE\";\n        case CsvState.DELIM: return \"DELIM\";\n        case CsvState.ISO8601_HHMM: return \"ISO8601_HHMM\";\n        case CsvState.UNQUOTED_STRING: return \"UNQUOTED_STRING\";\n        case CsvState.EXPONENT: return \"EXPONENT\";\n        case CsvState.SIGNED_EXPONENT: return \"SIGNED_EXPONENT\";\n        case CsvState.NEGATIVE_INTEGER: return \"NEGATIVE_INTEGER\";\n        case CsvState.TRAILING_WHITESPACE: return \"TRAILING_WHITESPACE\";\n    }\n    throw new Error(`decodeState(${state})`);\n}\n\n/**\n * For internal conceptual integrity.\n */\ninterface NormalizedDialect {\n    delim: ',' | ';';\n    escape: boolean;\n    lineTerm: '\\n';\n    quoteChar: '\"' | \"'\";\n    skipRows: number;\n    trim: boolean;\n}\n\n/**\n * Regular expression for detecting integers.\n */\nconst rxIsInt = /^\\d+$/;\n\n/**\n * Regular expression for detecting floating point numbers (with optional exponents).\n */\nconst rxIsFloat = /^[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?$/;\n\n// If a string has leading or trailing space,\n// contains a comma double quote or a newline\n// it needs to be quoted in CSV output\nconst rxNeedsQuoting = /^\\s|\\s$|,|\"|\\n/;\n\n/**\n * A polyfill in case String.trim does not exist.\n */\nconst trim = (function () {\n    // Fx 3.1 has a native trim function, it's about 10x faster, use it if it exists\n    if (String.prototype.trim) {\n        return function (s: string) {\n            return s.trim();\n        };\n    } else {\n        return function (s: string) {\n            return s.replace(/^\\s*/, '').replace(/\\s*$/, '');\n        };\n    }\n}());\n\n/**\n *\n */\nfunction chomp(s: string, lineterminator: string): string {\n    if (s.charAt(s.length - lineterminator.length) !== lineterminator) {\n        // Does not end with \\n, just return string.\n        return s;\n    }\n    else {\n        // Remove the newline.\n        return s.substring(0, s.length - lineterminator.length);\n    }\n}\n\n/**\n * Replaces all the funky line terminators with a single newline character.\n */\nfunction normalizeLineTerminator(csvString: string, dialect: Dialect = {}): string {\n    // Try to guess line terminator if it's not provided.\n    if (!dialect.lineTerminator) {\n        return csvString.replace(/(\\r\\n|\\n|\\r)/gm, '\\n');\n    }\n    // if not return the string untouched.\n    return csvString;\n}\n\n/**\n * Converts from the fields and records structure to an array of arrays.\n * The first row in the output contains the field names in the same order as the input.\n */\nexport function dataToArrays(data: Data): Field[][] {\n    const arrays: Field[][] = [];\n    const fieldIds = data.fields.map(field => field.id);\n    arrays.push(fieldIds);\n    for (const record of data.records) {\n        const tmp = fieldIds.map(fieldId => record[fieldId]);\n        arrays.push(tmp);\n    }\n    return arrays;\n}\n\n/**\n */\nfunction normalizeDialectOptions(dialect?: Dialect): NormalizedDialect {\n    // note lower case compared to CSV DDF.\n    const options: NormalizedDialect = {\n        delim: COMMA,\n        escape: true,\n        lineTerm: LF,\n        quoteChar: QUOTE,\n        skipRows: 0,\n        trim: true\n    };\n    if (dialect) {\n        if (typeof dialect.fieldDelimiter === 'string') {\n            switch (dialect.fieldDelimiter) {\n                case COMMA:\n                case SEMICOLON: {\n                    options.delim = dialect.fieldDelimiter;\n                    break;\n                }\n                default: {\n                    throw new Error(`Unexpected dialect field delimiter ${dialect.fieldDelimiter}.`);\n                }\n            }\n        }\n        if (typeof dialect.escapeEmbeddedQuotes === 'boolean') {\n            options.escape = dialect.escapeEmbeddedQuotes;\n        }\n        if (typeof dialect.lineTerminator === 'string') {\n            switch (dialect.lineTerminator) {\n                case LF:\n                case CR:\n                case CRLF: {\n                    options.lineTerm = LF;\n                    break;\n                }\n                default: {\n                    throw new Error(`Unexpected dialect lineTerminator ${dialect.lineTerminator}.`);\n                }\n            }\n        }\n        if (typeof dialect.quoteChar === 'string') {\n            switch (dialect.quoteChar) {\n                case APOS:\n                case QUOTE: {\n                    options.quoteChar = dialect.quoteChar;\n                    break;\n                }\n                default: {\n                    throw new Error(`Unexpected dialect quoteChar ${dialect.quoteChar}.`);\n                }\n            }\n        }\n        if (typeof dialect.skipInitialRows === 'number') {\n            options.skipRows = dialect.skipInitialRows;\n        }\n        if (typeof dialect.trimFields === 'boolean') {\n            options.trim = dialect.trimFields;\n        }\n    }\n    return options;\n}\n\n// ## serialize\n//\n// See README for docs\n//\n// Heavily based on uselesscode's JS CSV serializer (MIT Licensed):\n// http://www.uselesscode.org/javascript/csv/\n\n/**\n * Converts from structured data to a string in CSV format of the specified dialect.\n */\nexport function serialize(data: Data | Field[][], dialect?: Dialect): string {\n    const a: Field[][] = (data instanceof Array) ? data : dataToArrays(data);\n    const options = normalizeDialectOptions(dialect);\n\n    const fieldToString = function fieldToString(field: string | number | null): string {\n        if (field === null) {\n            // If field is null set to empty string\n            field = '';\n        }\n        else if (typeof field === \"string\" && rxNeedsQuoting.test(field)) {\n            if (options.escape) {\n                // FIXME: May need to be the quote character?\n                field = field.replace(/\"/g, '\"\"');\n            }\n            // Convert string to delimited string\n            field = options.quoteChar + field + options.quoteChar;\n        }\n        else if (typeof field === \"number\") {\n            // Convert number to string\n            field = field.toString(10);\n        }\n\n        return field;\n    };\n\n    /**\n     * Buffer for building up the output.\n     */\n    let outBuffer = '';\n\n    for (let i = 0; i < a.length; i += 1) {\n        /**\n         * The fields we are currently processing.\n         */\n        const fields = a[i];\n\n        /**\n         * Buffer for building up the current row.\n         */\n        let rowBuffer = '';\n\n        for (let j = 0; j < fields.length; j += 1) {\n            /**\n             * Buffer for building up the current field.\n             */\n            let fieldBuffer = fieldToString(fields[j]);\n            // If this is EOR append row to output and flush row\n            if (j === (fields.length - 1)) {\n                rowBuffer += fieldBuffer;\n                outBuffer += rowBuffer + options.lineTerm;\n                rowBuffer = '';\n            }\n            else {\n                // Add the current field to the current row\n                rowBuffer += fieldBuffer + options.delim;\n            }\n        }\n    }\n\n    return outBuffer;\n}\n\n/**\n * Normalizes the line terminator across the file.\n */\nfunction normalizeInputString(csvText: string, dialect?: Dialect) {\n    // When line terminator is not provided then we try to guess it\n    // and normalize it across the file.\n    if (!dialect || (dialect && !dialect.lineTerminator)) {\n        csvText = normalizeLineTerminator(csvText, dialect);\n    }\n\n    const options = normalizeDialectOptions(dialect);\n\n    // Get rid of any trailing \\n\n    return { s: chomp(csvText, options.lineTerm), options };\n}\n\n/**\n * Parses a string representation of CSV data into an array of arrays of fields.\n * The dialect may be specified to improve the parsing.\n */\nexport function parse(csvText: string, dialect?: Dialect, errors?: CSVError[]): Field[][] {\n\n    const { s, options } = normalizeInputString(csvText, dialect);\n\n    let state: CsvState = CsvState.START;\n    /**\n     * The length of the input string following normalization.\n     * Using cached length of s will improve performance and is safe because s is constant.\n     */\n    const sLength = s.length;\n\n    /**\n     * The character we are currently processing.\n     */\n    let ch = '';\n\n    let fieldQuoted = false;\n    /**\n     * Keep track of where a quotation mark begins for reporting unterminated string literals.\n     */\n    let quoteBegin = Number.MAX_SAFE_INTEGER;\n\n    /**\n     * The parsed current field\n     */\n    let field: Field = '';\n\n    /**\n     * The parsed row.\n     */\n    let row: Field[] = [];\n\n    /**\n     * The parsed output.\n     */\n    let out: Field[][] = [];\n\n    /**\n     * The 1-based line number.\n     */\n    let line = 1;\n\n    /**\n     * The zero-based column number.\n     */\n    let column = 0;\n\n    /**\n     * Helper function to parse a single field.\n     */\n    const parseField = function parseField(fieldAsString: string): string | number | null {\n        if (fieldQuoted) {\n            return fieldAsString;\n        }\n        else {\n            // If field is empty set to null\n            if (fieldAsString === '') {\n                return null;\n                // If the field was not quoted and we are trimming fields, trim it\n            }\n            else if (options.trim) {\n                fieldAsString = trim(fieldAsString);\n            }\n\n            // Convert unquoted numbers to their appropriate types\n            if (rxIsInt.test(fieldAsString)) {\n                return parseInt(fieldAsString, 10);\n            }\n            else if (rxIsFloat.test(fieldAsString)) {\n                return parseFloat(fieldAsString);\n            }\n            else {\n                // An example here is a heading which is not quoted.\n                return fieldAsString;\n            }\n        }\n    };\n\n    const error = function (e: CSVError) {\n        if (errors) {\n            errors.push(e);\n        }\n        else {\n            throw e;\n        }\n    };\n\n    for (let i = 0; i < sLength; i += 1) {\n        ch = s.charAt(i);\n\n        switch (state) {\n            case CsvState.START: {\n                switch (ch) {\n                    case ' ': {\n                        // Ignore whitespace.\n                        break;\n                    }\n                    case '0':\n                    case '1':\n                    case '2':\n                    case '3':\n                    case '4':\n                    case '5':\n                    case '6':\n                    case '7':\n                    case '8':\n                    case '9': {\n                        field += ch;\n                        state = CsvState.INTEGER;\n                        break;\n                    }\n                    case QUOTE: {\n                        quoteBegin = i;\n                        state = CsvState.QUOTE_STRING;\n                        break;\n                    }\n                    case APOS: {\n                        state = CsvState.APOS_STRING;\n                        break;\n                    }\n                    case PLUS: {\n                        state = CsvState.INTEGER;\n                        break;\n                    }\n                    case MINUS: {\n                        field += ch;\n                        state = CsvState.NEGATIVE_INTEGER;\n                        break;\n                    }\n                    default: {\n                        field += ch;\n                        state = CsvState.UNQUOTED_STRING;\n                    }\n                }\n                break;\n            }\n            case CsvState.INTEGER: {\n                switch (ch) {\n                    case '0':\n                    case '1':\n                    case '2':\n                    case '3':\n                    case '4':\n                    case '5':\n                    case '6':\n                    case '7':\n                    case '8':\n                    case '9': {\n                        field += ch;\n                        break;\n                    }\n                    case '.': {\n                        field += ch;\n                        state = CsvState.DECIMAL;\n                        break;\n                    }\n                    case ':': {\n                        field += ch;\n                        state = CsvState.ISO8601_HHMM;\n                        break;\n                    }\n                    case 'e': {\n                        field += ch;\n                        state = CsvState.EXPONENT;\n                        break;\n                    }\n                    case COMMA: {\n                        field = parseField(field as string);\n                        row.push(field);\n                        field = '';\n                        state = CsvState.DELIM;\n                        break;\n                    }\n                    case APOS: {\n                        const msg = messages[ErrorCode.E001];\n                        error(new CSVError(msg.code, msg.desc, i, line, column));\n                        break;\n                    }\n                    case QUOTE: {\n                        const msg = messages[ErrorCode.E002];\n                        error(new CSVError(msg.code, msg.desc, i, line, column));\n                        break;\n                    }\n                    case SPACE: {\n                        field = parseField(field as string);\n                        row.push(field);\n                        field = '';\n                        state = CsvState.TRAILING_WHITESPACE;\n                        break;\n                    }\n                    case LF: {\n                        field = parseField(field as string);\n                        row.push(field);\n                        field = '';\n                        out.push(row);\n                        row = [];\n                        state = CsvState.START;\n                        break;\n                    }\n                    case CR: {\n                        // Do we want to support CRLF?\n                        field = parseField(field as string);\n                        row.push(field);\n                        field = '';\n                        out.push(row);\n                        row = [];\n                        state = CsvState.START;\n                        break;\n                    }\n                    default: {\n                        const msg = messages[ErrorCode.E003];\n                        error(new CSVError(msg.code, msg.desc, i, line, column));\n                    }\n                }\n                break;\n            }\n            case CsvState.NEGATIVE_INTEGER: {\n                switch (ch) {\n                    case '0':\n                    case '1':\n                    case '2':\n                    case '3':\n                    case '4':\n                    case '5':\n                    case '6':\n                    case '7':\n                    case '8':\n                    case '9': {\n                        field += ch;\n                        break;\n                    }\n                    case '.': {\n                        field += ch;\n                        state = CsvState.DECIMAL;\n                        break;\n                    }\n                    default: {\n                        const msg = messages[ErrorCode.E003];\n                        error(new CSVError(msg.code, msg.desc, i, line, column));\n                    }\n                }\n                break;\n            }\n            case CsvState.DECIMAL: {\n                switch (ch) {\n                    case '0':\n                    case '1':\n                    case '2':\n                    case '3':\n                    case '4':\n                    case '5':\n                    case '6':\n                    case '7':\n                    case '8':\n                    case '9': {\n                        field += ch;\n                        break;\n                    }\n                    case 'e': {\n                        field += ch;\n                        state = CsvState.EXPONENT;\n                        break;\n                    }\n                    case options.delim: {\n                        field = parseField(field);\n                        row.push(field);\n                        field = '';\n                        state = CsvState.DELIM;\n                        break;\n                    }\n                    case APOS: {\n                        const msg = messages[ErrorCode.E001];\n                        error(new CSVError(msg.code, msg.desc, i, line, column));\n                        break;\n                    }\n                    case QUOTE: {\n                        const msg = messages[ErrorCode.E002];\n                        error(new CSVError(msg.code, msg.desc, i, line, column));\n                        break;\n                    }\n                    case SPACE: {\n                        field = parseField(field as string);\n                        row.push(field);\n                        field = '';\n                        state = CsvState.TRAILING_WHITESPACE;\n                        break;\n                    }\n                    default: {\n                        const msg = messages[ErrorCode.E003];\n                        error(new CSVError(msg.code, msg.desc, i, line, column));\n                    }\n                }\n                break;\n            }\n            case CsvState.APOS_STRING: {\n                switch (ch) {\n                    case APOS: {\n                        state = CsvState.APOS_ESCAPE;\n                        break;\n                    }\n                    default: {\n                        field += ch;\n                        break;\n                    }\n                }\n                break;\n            }\n            case CsvState.QUOTE_STRING: {\n                switch (ch) {\n                    case QUOTE: {\n                        state = CsvState.QUOTE_ESCAPE;\n                        break;\n                    }\n                    default: {\n                        field += ch;\n                        break;\n                    }\n                }\n                break;\n            }\n            case CsvState.QUOTE_ESCAPE: {\n                switch (ch) {\n                    case QUOTE: {\n                        field += ch;\n                        state = CsvState.QUOTE_STRING;\n                        break;\n                    }\n                    case options.delim: {\n                        row.push(field);\n                        field = '';\n                        state = CsvState.DELIM;\n                        break;\n                    }\n                    case LF: {\n                        row.push(field);\n                        field = '';\n                        out.push(row);\n                        row = [];\n                        state = CsvState.START;\n                        break;\n                    }\n                    default: {\n                        const msg = messages[ErrorCode.E003];\n                        error(new CSVError(msg.code, msg.desc, i, line, column));\n                    }\n                }\n                break;\n            }\n            case CsvState.APOS_ESCAPE: {\n                switch (ch) {\n                    case APOS: {\n                        field += ch;\n                        state = CsvState.APOS_STRING;\n                        break;\n                    }\n                    case options.delim: {\n                        row.push(field);\n                        field = '';\n                        state = CsvState.DELIM;\n                        break;\n                    }\n                    case LF: {\n                        row.push(field);\n                        field = '';\n                        out.push(row);\n                        row = [];\n                        state = CsvState.START;\n                        break;\n                    }\n                    default: {\n                        const msg = messages[ErrorCode.E003];\n                        error(new CSVError(msg.code, msg.desc, i, line, column));\n                    }\n                }\n                break;\n            }\n            case CsvState.DELIM: {\n                switch (ch) {\n                    case '0':\n                    case '1':\n                    case '2':\n                    case '3':\n                    case '4':\n                    case '5':\n                    case '6':\n                    case '7':\n                    case '8':\n                    case '9': {\n                        field += ch;\n                        state = CsvState.INTEGER;\n                        break;\n                    }\n                    case SPACE: {\n                        break;\n                    }\n                    case PLUS: {\n                        state = CsvState.INTEGER;\n                        break;\n                    }\n                    case MINUS: {\n                        field += ch;\n                        state = CsvState.NEGATIVE_INTEGER;\n                        break;\n                    }\n                    case QUOTE: {\n                        quoteBegin = i;\n                        state = CsvState.QUOTE_STRING;\n                        break;\n                    }\n                    case APOS: {\n                        quoteBegin = i;\n                        state = CsvState.APOS_STRING;\n                        break;\n                    }\n                    default: {\n                        field += ch;\n                        state = CsvState.UNQUOTED_STRING;\n                    }\n                }\n                break;\n            }\n            case CsvState.ISO8601_HHMM: {\n                switch (ch) {\n                    case '0':\n                    case '1':\n                    case '2':\n                    case '3':\n                    case '4':\n                    case '5':\n                    case '6':\n                    case '7':\n                    case '8':\n                    case '9': {\n                        field += ch;\n                        break;\n                    }\n                    case LF: {\n                        field = parseField(field as string);\n                        row.push(field);\n                        field = '';\n                        out.push(row);\n                        row = [];\n                        state = CsvState.START;\n                        break;\n                    }\n                    case CR: {\n                        // Do we want to support CRLF?\n                        field = parseField(field as string);\n                        row.push(field);\n                        field = '';\n                        out.push(row);\n                        row = [];\n                        state = CsvState.START;\n                        break;\n                    }\n                    default: {\n                        const msg = messages[ErrorCode.E003];\n                        error(new CSVError(msg.code, msg.desc, i, line, column));\n                    }\n                }\n                break;\n            }\n            case CsvState.UNQUOTED_STRING: {\n                switch (ch) {\n                    case options.delim: {\n                        row.push(field);\n                        field = '';\n                        state = CsvState.DELIM;\n                        break;\n                    }\n                    case LF: {\n                        row.push(field);\n                        field = '';\n                        out.push(row);\n                        row = [];\n                        state = CsvState.START;\n                        break;\n                    }\n                    case CR: {\n                        row.push(field);\n                        field = '';\n                        out.push(row);\n                        row = [];\n                        state = CsvState.START;\n                        break;\n                    }\n                    default: {\n                        field += ch;\n                    }\n                }\n                break;\n            }\n            case CsvState.EXPONENT: {\n                switch (ch) {\n                    case PLUS:\n                    case MINUS: {\n                        field += ch;\n                        state = CsvState.SIGNED_EXPONENT;\n                        break;\n                    }\n                    case SPACE: {\n                        field = parseField(field as string);\n                        row.push(field);\n                        field = '';\n                        state = CsvState.TRAILING_WHITESPACE;\n                        break;\n                    }\n                    case '0':\n                    case '1':\n                    case '2':\n                    case '3':\n                    case '4':\n                    case '5':\n                    case '6':\n                    case '7':\n                    case '8':\n                    case '9': {\n                        field += ch;\n                        break;\n                    }\n                    default: {\n                        const msg = messages[ErrorCode.E003];\n                        error(new CSVError(msg.code, msg.desc, i, line, column));\n                    }\n                }\n                break;\n            }\n            case CsvState.SIGNED_EXPONENT: {\n                switch (ch) {\n                    case SPACE: {\n                        field = parseField(field as string);\n                        row.push(field);\n                        field = '';\n                        state = CsvState.TRAILING_WHITESPACE;\n                        break;\n                    }\n                    case '0':\n                    case '1':\n                    case '2':\n                    case '3':\n                    case '4':\n                    case '5':\n                    case '6':\n                    case '7':\n                    case '8':\n                    case '9': {\n                        field += ch;\n                        break;\n                    }\n                    case LF: {\n                        field = parseField(field as string);\n                        row.push(field);\n                        field = '';\n                        out.push(row);\n                        row = [];\n                        state = CsvState.START;\n                        break;\n                    }\n                    case CR: {\n                        field = parseField(field as string);\n                        row.push(field);\n                        field = '';\n                        out.push(row);\n                        row = [];\n                        state = CsvState.START;\n                        break;\n                    }\n                    default: {\n                        const msg = messages[ErrorCode.E003];\n                        error(new CSVError(msg.code, msg.desc, i, line, column));\n                    }\n                }\n                break;\n            }\n            case CsvState.TRAILING_WHITESPACE: {\n                switch (ch) {\n                    case '0':\n                    case '1':\n                    case '2':\n                    case '3':\n                    case '4':\n                    case '5':\n                    case '6':\n                    case '7':\n                    case '8':\n                    case '9': {\n                        const msg = messages[ErrorCode.E004];\n                        error(new CSVError(msg.code, msg.desc, i, line, column));\n                        break;\n                    }\n                    default: {\n                        const msg = messages[ErrorCode.E003];\n                        error(new CSVError(msg.code, msg.desc, i, line, column));\n                    }\n                }\n                break;\n            }\n            default: {\n                throw new Error(`Unexpected state ${decodeState(state)} at ${i} for ${s}`);\n            }\n        }\n    }\n\n    // We've reached the end of the string.\n    switch (state) {\n        case CsvState.INTEGER: {\n            // Add the last field\n            field = parseField(field as string);\n            row.push(field);\n            field = '';\n            out.push(row);\n            row = [];\n            break;\n        }\n        case CsvState.DECIMAL: {\n            // Add the last field\n            field = parseField(field as string);\n            row.push(field);\n            field = '';\n            out.push(row);\n            row = [];\n            break;\n        }\n        case CsvState.EXPONENT:\n        case CsvState.SIGNED_EXPONENT: {\n            // Add the last field\n            field = parseField(field as string);\n            row.push(field);\n            field = '';\n            out.push(row);\n            row = [];\n            break;\n        }\n        case CsvState.APOS_ESCAPE: {\n            // It's not actually an escape that we saw, but the end of the apostrophe delimited string.\n            // Add the last field\n            field = parseField(field as string);\n            row.push(field);\n            field = '';\n            out.push(row);\n            row = [];\n            break;\n        }\n        case CsvState.QUOTE_ESCAPE: {\n            // It's not actually an escape that we saw, but the end of the quote delimited string.\n            // Add the last field\n            field = parseField(field as string);\n            row.push(field);\n            field = '';\n            out.push(row);\n            row = [];\n            break;\n        }\n        case CsvState.ISO8601_HHMM: {\n            // Add the last field\n            field = parseField(field as string);\n            row.push(field);\n            field = '';\n            out.push(row);\n            row = [];\n            break;\n        }\n        case CsvState.DELIM: {\n            row.push(null);\n            field = '';\n            out.push(row);\n            row = [];\n            break;\n        }\n        case CsvState.APOS_STRING: {\n            const msg = messages[ErrorCode.E005];\n            error(new CSVError(msg.code, msg.desc, quoteBegin, line, column));\n            break;\n        }\n        case CsvState.QUOTE_STRING: {\n            const msg = messages[ErrorCode.E006];\n            error(new CSVError(msg.code, msg.desc, quoteBegin, line, column));\n            break;\n        }\n        case CsvState.START: {\n            // Do nothing?\n            break;\n        }\n        case CsvState.TRAILING_WHITESPACE: {\n            // Do nothing?\n            break;\n        }\n        default: {\n            throw new Error(`Unexpected end state ${decodeState(state)} ${s}`);\n        }\n    }\n\n    // Expose the ability to discard initial rows\n    if (options.skipRows) out = out.slice(options.skipRows);\n\n    return out;\n}\n","export enum ErrorCode {\n    /**\n     * Unexpected apostrophe.\n     */\n    E001 = 1,\n    /**\n     * Unexpected quote.\n     */\n    E002 = 2,\n    /**\n     * Unexpected character.\n     */\n    E003 = 3,\n    /**\n     * Unexpected digit.\n     */\n    E004 = 4,\n    /**\n     * Missing closing apostrophe.\n     */\n    E005 = 5,\n    /**\n     * Missing closing quote.\n     */\n    E006 = 6\n}\n\nexport interface CodeAndDesc {\n    code: string;\n    desc: string;\n}\n\nexport const messages: { [code: number]: CodeAndDesc } = {};\n\nmessages[ErrorCode.E001] = { code: 'E001', desc: \"Unexpected apostrophe.\" };\nmessages[ErrorCode.E002] = { code: 'E002', desc: \"Unexpected quote.\" };\nmessages[ErrorCode.E003] = { code: 'E003', desc: \"Unexpected character.\" };\nmessages[ErrorCode.E004] = { code: 'E004', desc: \"Unexpected digit.\" };\nmessages[ErrorCode.E005] = { code: 'E005', desc: \"Missing closing apostrophe.\" };\nmessages[ErrorCode.E006] = { code: 'E006', desc: \"Missing closing quote.\" };\n","export class CSVError {\n    constructor(public code: string, public message: string, public index: number, public line: number, public column: number) {\n    }\n}\n"],"names":[],"mappings":";;;;;;AEAA,IAAA,QAAA,IAAA,YAAA;IACI,SAAJ,QAAA,CAAuB,IAAY,EAAS,OAAe,EAAS,KAAa,EAAS,IAAY,EAAS,MAAc,EAA7H;QAAuB,IAAvB,CAAA,IAA2B,GAAJ,IAAI,CAAQ;QAAS,IAA5C,CAAA,OAAmD,GAAP,OAAO,CAAQ;QAAS,IAApE,CAAA,KAAyE,GAAL,KAAK,CAAQ;QAAS,IAA1F,CAAA,IAA8F,GAAJ,IAAI,CAAQ;QAAS,IAA/G,CAAA,MAAqH,GAAN,MAAM,CAAQ;KACxH;IACL,OAAA,QAAC,CAAD;CAAC,EAAD,CAAA,CAAC;;ADHD,IAAY,SAyBX,CAzBD;AAAA,CAAA,UAAY,SAAS,EAArB;;;;IAII,SAAJ,CAAA,SAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAY,CAAA;;;;IAIR,SAAJ,CAAA,SAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAY,CAAA;;;;IAIR,SAAJ,CAAA,SAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAY,CAAA;;;;IAIR,SAAJ,CAAA,SAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAY,CAAA;;;;IAIR,SAAJ,CAAA,SAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAY,CAAA;;;;IAIR,SAAJ,CAAA,SAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAY,CAAA;CACX,EAzBW,SAAS,KAAT,SAAS,GAyBrB,EAAA,CAAA,CAAA,CAAC;AAOD,AAAO,IAAM,QAAQ,GAAoC,EAAE,CAAC;AAE5D,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,wBAAwB,EAAE,CAAC;AAC5E,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,mBAAmB,EAAE,CAAC;AACvE,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,uBAAuB,EAAE,CAAC;AAC3E,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,mBAAmB,EAAE,CAAC;AACvE,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,6BAA6B,EAAE,CAAC;AACjF,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,wBAAwB,EAAE,CAAC;;ADoB5E,IAAM,KAAK,GAAG,GAAG,CAAC;AAClB,IAAM,SAAS,GAAG,GAAG,CAAC;AAEtB,IAAM,EAAE,GAAG,IAAI,CAAC;AAChB,IAAM,EAAE,GAAG,IAAI,CAAC;AAChB,IAAM,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC;AACrB,IAAM,IAAI,GAAG,GAAG,CAAC;AACjB,IAAM,KAAK,GAAG,GAAG,CAAC;AAClB,IAAM,KAAK,GAAG,GAAG,CAAC;AAClB,IAAM,KAAK,GAAG,GAAG,CAAC;AAClB,IAAM,IAAI,GAAG,GAAG,CAAC;AAEjB,IAAK,QAmBJ,CAnBD;AAAA,CAAA,UAAK,QAAQ,EAAb;IACI,QAAJ,CAAA,QAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAa,CAAA;IACT,QAAJ,CAAA,QAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAe,CAAA;IACX,QAAJ,CAAA,QAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAe,CAAA;IACX,QAAJ,CAAA,QAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,GAAA,YAAkB,CAAA;IACd,QAAJ,CAAA,QAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAmB,CAAA;IACf,QAAJ,CAAA,QAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAmB,CAAA;IACf,QAAJ,CAAA,QAAA,CAAA,cAAA,CAAA,GAAA,CAAA,CAAA,GAAA,cAAoB,CAAA;IAChB,QAAJ,CAAA,QAAA,CAAA,cAAA,CAAA,GAAA,CAAA,CAAA,GAAA,cAAoB,CAAA;;;;IAIhB,QAAJ,CAAA,QAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAa,CAAA;IACT,QAAJ,CAAA,QAAA,CAAA,cAAA,CAAA,GAAA,CAAA,CAAA,GAAA,cAAoB,CAAA;IAChB,QAAJ,CAAA,QAAA,CAAA,iBAAA,CAAA,GAAA,EAAA,CAAA,GAAA,iBAAwB,CAAA;IACpB,QAAJ,CAAA,QAAA,CAAA,UAAA,CAAA,GAAA,EAAA,CAAA,GAAA,UAAiB,CAAA;IACb,QAAJ,CAAA,QAAA,CAAA,iBAAA,CAAA,GAAA,EAAA,CAAA,GAAA,iBAAwB,CAAA;IACpB,QAAJ,CAAA,QAAA,CAAA,kBAAA,CAAA,GAAA,EAAA,CAAA,GAAA,kBAAyB,CAAA;IACrB,QAAJ,CAAA,QAAA,CAAA,qBAAA,CAAA,GAAA,EAAA,CAAA,GAAA,qBAA4B,CAAA;CAC3B,EAnBI,QAAQ,KAAR,QAAQ,GAmBb,EAAA,CAAA,CAAA,CAAC;AAED,SAAA,WAAA,CAAqB,KAAe,EAApC;IACI,QAAQ,KAAK;QACT,KAAK,QAAQ,CAAC,KAAK,EAAE,OAAO,OAAO,CAAC;QACpC,KAAK,QAAQ,CAAC,OAAO,EAAE,OAAO,SAAS,CAAC;QACxC,KAAK,QAAQ,CAAC,OAAO,EAAE,OAAO,SAAS,CAAC;QACxC,KAAK,QAAQ,CAAC,UAAU,EAAE,OAAO,YAAY,CAAC;QAC9C,KAAK,QAAQ,CAAC,WAAW,EAAE,OAAO,aAAa,CAAC;QAChD,KAAK,QAAQ,CAAC,WAAW,EAAE,OAAO,aAAa,CAAC;QAChD,KAAK,QAAQ,CAAC,YAAY,EAAE,OAAO,cAAc,CAAC;QAClD,KAAK,QAAQ,CAAC,YAAY,EAAE,OAAO,cAAc,CAAC;QAClD,KAAK,QAAQ,CAAC,KAAK,EAAE,OAAO,OAAO,CAAC;QACpC,KAAK,QAAQ,CAAC,YAAY,EAAE,OAAO,cAAc,CAAC;QAClD,KAAK,QAAQ,CAAC,eAAe,EAAE,OAAO,iBAAiB,CAAC;QACxD,KAAK,QAAQ,CAAC,QAAQ,EAAE,OAAO,UAAU,CAAC;QAC1C,KAAK,QAAQ,CAAC,eAAe,EAAE,OAAO,iBAAiB,CAAC;QACxD,KAAK,QAAQ,CAAC,gBAAgB,EAAE,OAAO,kBAAkB,CAAC;QAC1D,KAAK,QAAQ,CAAC,mBAAmB,EAAE,OAAO,qBAAqB,CAAC;KACnE;IACD,MAAM,IAAI,KAAK,CAAC,cAApB,GAAmC,KAAK,GAAxC,GAA2C,CAAC,CAAC;CAC5C;;;;AAiBD,IAAM,OAAO,GAAG,OAAO,CAAC;;;;AAKxB,IAAM,SAAS,GAAG,0CAA0C,CAAC;;;;AAK7D,IAAM,cAAc,GAAG,gBAAgB,CAAC;;;;AAKxC,IAAM,IAAI,IAAI,YAAd;;IAEI,IAAI,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE;QACvB,OAAO,UAAU,CAAS,EAAlC;YACY,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;SACnB,CAAC;KACL;SAAM;QACH,OAAO,UAAU,CAAS,EAAlC;YACY,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;SACpD,CAAC;KACL;CACJ,EAAE,CAAC,CAAC;;;;AAKL,SAAA,KAAA,CAAe,CAAS,EAAE,cAAsB,EAAhD;IACI,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,GAAG,cAAc,CAAC,MAAM,CAAC,KAAK,cAAc,EAAE;;QAE/D,OAAO,CAAC,CAAC;KACZ;SACI;;QAED,OAAO,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC;KAC3D;CACJ;;;;AAKD,SAAA,uBAAA,CAAiC,SAAiB,EAAE,OAAqB,EAAzE;IAAoD,IAApD,OAAA,KAAA,KAAA,CAAA,EAAoD,EAAA,OAApD,GAAA,EAAyE,CAAzE,EAAA;;IAEI,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE;QACzB,OAAO,SAAS,CAAC,OAAO,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;KACpD;;IAED,OAAO,SAAS,CAAC;CACpB;;;;;AAMD,AAAA,SAAA,YAAA,CAA6B,IAAU,EAAvC;IACI,IAAM,MAAM,GAAc,EAAE,CAAC;IAC7B,IAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAA,KAAK,EAA1C,EAA8C,OAAA,KAAK,CAAC,EAAE,CAAtD,EAAsD,CAAC,CAAC;IACpD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC1B,IAAA,OAAA,GAAA,UAAe,MAAM,EAArB;QACQ,IAAM,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC,UAAA,OAAO,EAAxC,EAA4C,OAAA,MAAM,CAAC,OAAO,CAAC,CAA3D,EAA2D,CAAC,CAAC;QACrD,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KACpB,CAAL;IAHI,KAAqB,IAAzB,EAAA,GAAA,CAAqC,EAAZ,EAAzB,GAAyB,IAAI,CAAC,OAAO,EAAZ,EAAzB,GAAA,EAAA,CAAA,MAAqC,EAAZ,EAAzB,EAAqC,EAArC;QAAS,IAAM,MAAM,GAArB,EAAA,CAAA,EAAA,CAAqB,CAArB;QAAA,OAAA,CAAe,MAAM,CAArB,CAAA;KAGK;IACD,OAAO,MAAM,CAAC;CACjB;;;AAID,SAAA,uBAAA,CAAiC,OAAiB,EAAlD;;IAEI,IAAM,OAAO,GAAsB;QAC/B,KAAK,EAAE,KAAK;QACZ,MAAM,EAAE,IAAI;QACZ,QAAQ,EAAE,EAAE;QACZ,SAAS,EAAE,KAAK;QAChB,QAAQ,EAAE,CAAC;QACX,IAAI,EAAE,IAAI;KACb,CAAC;IACF,IAAI,OAAO,EAAE;QACT,IAAI,OAAO,OAAO,CAAC,cAAc,KAAK,QAAQ,EAAE;YAC5C,QAAQ,OAAO,CAAC,cAAc;gBAC1B,KAAK,KAAK,CAAC;gBACX,KAAK,SAAS,EAAE;oBACZ,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,cAAc,CAAC;oBACvC,MAAM;iBACT;gBACD,SAAS;oBACL,MAAM,IAAI,KAAK,CAAC,qCAApC,GAA0E,OAAO,CAAC,cAAc,GAAhG,GAAmG,CAAC,CAAC;iBACpF;aACJ;SACJ;QACD,IAAI,OAAO,OAAO,CAAC,oBAAoB,KAAK,SAAS,EAAE;YACnD,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,oBAAoB,CAAC;SACjD;QACD,IAAI,OAAO,OAAO,CAAC,cAAc,KAAK,QAAQ,EAAE;YAC5C,QAAQ,OAAO,CAAC,cAAc;gBAC1B,KAAK,EAAE,CAAC;gBACR,KAAK,EAAE,CAAC;gBACR,KAAK,IAAI,EAAE;oBACP,OAAO,CAAC,QAAQ,GAAG,EAAE,CAAC;oBACtB,MAAM;iBACT;gBACD,SAAS;oBACL,MAAM,IAAI,KAAK,CAAC,oCAApC,GAAyE,OAAO,CAAC,cAAc,GAA/F,GAAkG,CAAC,CAAC;iBACnF;aACJ;SACJ;QACD,IAAI,OAAO,OAAO,CAAC,SAAS,KAAK,QAAQ,EAAE;YACvC,QAAQ,OAAO,CAAC,SAAS;gBACrB,KAAK,IAAI,CAAC;gBACV,KAAK,KAAK,EAAE;oBACR,OAAO,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;oBACtC,MAAM;iBACT;gBACD,SAAS;oBACL,MAAM,IAAI,KAAK,CAAC,+BAApC,GAAoE,OAAO,CAAC,SAAS,GAArF,GAAwF,CAAC,CAAC;iBACzE;aACJ;SACJ;QACD,IAAI,OAAO,OAAO,CAAC,eAAe,KAAK,QAAQ,EAAE;YAC7C,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,eAAe,CAAC;SAC9C;QACD,IAAI,OAAO,OAAO,CAAC,UAAU,KAAK,SAAS,EAAE;YACzC,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,UAAU,CAAC;SACrC;KACJ;IACD,OAAO,OAAO,CAAC;CAClB;;;;;;;;;;AAYD,AAAA,SAAA,SAAA,CAA0B,IAAsB,EAAE,OAAiB,EAAnE;IACI,IAAM,CAAC,GAAc,CAAC,IAAI,YAAY,KAAK,IAAI,IAAI,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;IACzE,IAAM,OAAO,GAAG,uBAAuB,CAAC,OAAO,CAAC,CAAC;IAEjD,IAAM,aAAa,GAAG,SAA1B,aAAA,CAAiD,KAA6B,EAA9E;QACQ,IAAI,KAAK,KAAK,IAAI,EAAE;;YAEhB,KAAK,GAAG,EAAE,CAAC;SACd;aACI,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YAC9D,IAAI,OAAO,CAAC,MAAM,EAAE;;gBAEhB,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;aACrC;;YAED,KAAK,GAAG,OAAO,CAAC,SAAS,GAAG,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC;SACzD;aACI,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;;YAEhC,KAAK,GAAG,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;SAC9B;QAED,OAAO,KAAK,CAAC;KAChB,CAAC;;;;IAKF,IAAI,SAAS,GAAG,EAAE,CAAC;IAEnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;;;;QAIlC,IAAM,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;;;;QAKpB,IAAI,SAAS,GAAG,EAAE,CAAC;QAEnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;;;;YAIvC,IAAI,WAAW,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;;YAE3C,IAAI,CAAC,MAAM,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE;gBAC3B,SAAS,IAAI,WAAW,CAAC;gBACzB,SAAS,IAAI,SAAS,GAAG,OAAO,CAAC,QAAQ,CAAC;gBAC1C,SAAS,GAAG,EAAE,CAAC;aAClB;iBACI;;gBAED,SAAS,IAAI,WAAW,GAAG,OAAO,CAAC,KAAK,CAAC;aAC5C;SACJ;KACJ;IAED,OAAO,SAAS,CAAC;CACpB;;;;AAKD,SAAA,oBAAA,CAA8B,OAAe,EAAE,OAAiB,EAAhE;;;IAGI,IAAI,CAAC,OAAO,KAAK,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE;QAClD,OAAO,GAAG,uBAAuB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;KACvD;IAED,IAAM,OAAO,GAAG,uBAAuB,CAAC,OAAO,CAAC,CAAC;;IAGjD,OAAO,EAAE,CAAC,EAAE,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,QAAQ,CAAC,EAAE,OAAO,EAAzD,OAAyD,EAAE,CAAC;CAC3D;;;;;AAMD,AAAA,SAAA,KAAA,CAAsB,OAAe,EAAE,OAAiB,EAAE,MAAmB,EAA7E;IAEU,IAAA,EAAV,GAAA,oBAAA,CAAA,OAAA,EAAA,OAAA,CAAiE,EAArD,CAAZ,GAAA,EAAA,CAAA,CAAa,EAAE,OAAf,GAAA,EAAA,CAAA,OAAsB,CAA4C;IAE9D,IAAI,KAAK,GAAa,QAAQ,CAAC,KAAK,CAAC;;;;;IAKrC,IAAM,OAAO,GAAG,CAAC,CAAC,MAAM,CAAC;;;;IAKzB,IAAI,EAAE,GAAG,EAAE,CAAC;IAEZ,IAAI,WAAW,GAAG,KAAK,CAAC;;;;IAIxB,IAAI,UAAU,GAAG,MAAM,CAAC,gBAAgB,CAAC;;;;IAKzC,IAAI,KAAK,GAAU,EAAE,CAAC;;;;IAKtB,IAAI,GAAG,GAAY,EAAE,CAAC;;;;IAKtB,IAAI,GAAG,GAAc,EAAE,CAAC;;;;IAKxB,IAAI,IAAI,GAAG,CAAC,CAAC;;;;IAKb,IAAI,MAAM,GAAG,CAAC,CAAC;;;;IAKf,IAAM,UAAU,GAAG,SAAvB,UAAA,CAA2C,aAAqB,EAAhE;QACQ,IAAI,WAAW,EAAE;YACb,OAAO,aAAa,CAAC;SACxB;aACI;;YAED,IAAI,aAAa,KAAK,EAAE,EAAE;gBACtB,OAAO,IAAI,CAAC;;aAEf;iBACI,IAAI,OAAO,CAAC,IAAI,EAAE;gBACnB,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC;aACvC;;YAGD,IAAI,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE;gBAC7B,OAAO,QAAQ,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;aACtC;iBACI,IAAI,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE;gBACpC,OAAO,UAAU,CAAC,aAAa,CAAC,CAAC;aACpC;iBACI;;gBAED,OAAO,aAAa,CAAC;aACxB;SACJ;KACJ,CAAC;IAEF,IAAM,KAAK,GAAG,UAAU,CAAW,EAAvC;QACQ,IAAI,MAAM,EAAE;YACR,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SAClB;aACI;YACD,MAAM,CAAC,CAAC;SACX;KACJ,CAAC;IAEF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,EAAE,CAAC,IAAI,CAAC,EAAE;QACjC,EAAE,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAEjB,QAAQ,KAAK;YACT,KAAK,QAAQ,CAAC,KAAK,EAAE;gBACjB,QAAQ,EAAE;oBACN,KAAK,GAAG,EAAE;;wBAEN,MAAM;qBACT;oBACD,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,EAAE;wBACN,KAAK,IAAI,EAAE,CAAC;wBACZ,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC;wBACzB,MAAM;qBACT;oBACD,KAAK,KAAK,EAAE;wBACR,UAAU,GAAG,CAAC,CAAC;wBACf,KAAK,GAAG,QAAQ,CAAC,YAAY,CAAC;wBAC9B,MAAM;qBACT;oBACD,KAAK,IAAI,EAAE;wBACP,KAAK,GAAG,QAAQ,CAAC,WAAW,CAAC;wBAC7B,MAAM;qBACT;oBACD,KAAK,IAAI,EAAE;wBACP,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC;wBACzB,MAAM;qBACT;oBACD,KAAK,KAAK,EAAE;wBACR,KAAK,IAAI,EAAE,CAAC;wBACZ,KAAK,GAAG,QAAQ,CAAC,gBAAgB,CAAC;wBAClC,MAAM;qBACT;oBACD,SAAS;wBACL,KAAK,IAAI,EAAE,CAAC;wBACZ,KAAK,GAAG,QAAQ,CAAC,eAAe,CAAC;qBACpC;iBACJ;gBACD,MAAM;aACT;YACD,KAAK,QAAQ,CAAC,OAAO,EAAE;gBACnB,QAAQ,EAAE;oBACN,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,EAAE;wBACN,KAAK,IAAI,EAAE,CAAC;wBACZ,MAAM;qBACT;oBACD,KAAK,GAAG,EAAE;wBACN,KAAK,IAAI,EAAE,CAAC;wBACZ,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC;wBACzB,MAAM;qBACT;oBACD,KAAK,GAAG,EAAE;wBACN,KAAK,IAAI,EAAE,CAAC;wBACZ,KAAK,GAAG,QAAQ,CAAC,YAAY,CAAC;wBAC9B,MAAM;qBACT;oBACD,KAAK,GAAG,EAAE;wBACN,KAAK,IAAI,EAAE,CAAC;wBACZ,KAAK,GAAG,QAAQ,CAAC,QAAQ,CAAC;wBAC1B,MAAM;qBACT;oBACD,KAAK,KAAK,EAAE;wBACR,KAAK,GAAG,UAAU,CAAC,KAAe,CAAC,CAAC;wBACpC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAChB,KAAK,GAAG,EAAE,CAAC;wBACX,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;wBACvB,MAAM;qBACT;oBACD,KAAK,IAAI,EAAE;wBACP,IAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;wBACrC,KAAK,CAAC,IAAI,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;wBACzD,MAAM;qBACT;oBACD,KAAK,KAAK,EAAE;wBACR,IAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;wBACrC,KAAK,CAAC,IAAI,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;wBACzD,MAAM;qBACT;oBACD,KAAK,KAAK,EAAE;wBACR,KAAK,GAAG,UAAU,CAAC,KAAe,CAAC,CAAC;wBACpC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAChB,KAAK,GAAG,EAAE,CAAC;wBACX,KAAK,GAAG,QAAQ,CAAC,mBAAmB,CAAC;wBACrC,MAAM;qBACT;oBACD,KAAK,EAAE,EAAE;wBACL,KAAK,GAAG,UAAU,CAAC,KAAe,CAAC,CAAC;wBACpC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAChB,KAAK,GAAG,EAAE,CAAC;wBACX,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACd,GAAG,GAAG,EAAE,CAAC;wBACT,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;wBACvB,MAAM;qBACT;oBACD,KAAK,EAAE,EAAE;;wBAEL,KAAK,GAAG,UAAU,CAAC,KAAe,CAAC,CAAC;wBACpC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAChB,KAAK,GAAG,EAAE,CAAC;wBACX,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACd,GAAG,GAAG,EAAE,CAAC;wBACT,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;wBACvB,MAAM;qBACT;oBACD,SAAS;wBACL,IAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;wBACrC,KAAK,CAAC,IAAI,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;qBAC5D;iBACJ;gBACD,MAAM;aACT;YACD,KAAK,QAAQ,CAAC,gBAAgB,EAAE;gBAC5B,QAAQ,EAAE;oBACN,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,EAAE;wBACN,KAAK,IAAI,EAAE,CAAC;wBACZ,MAAM;qBACT;oBACD,KAAK,GAAG,EAAE;wBACN,KAAK,IAAI,EAAE,CAAC;wBACZ,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC;wBACzB,MAAM;qBACT;oBACD,SAAS;wBACL,IAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;wBACrC,KAAK,CAAC,IAAI,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;qBAC5D;iBACJ;gBACD,MAAM;aACT;YACD,KAAK,QAAQ,CAAC,OAAO,EAAE;gBACnB,QAAQ,EAAE;oBACN,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,EAAE;wBACN,KAAK,IAAI,EAAE,CAAC;wBACZ,MAAM;qBACT;oBACD,KAAK,GAAG,EAAE;wBACN,KAAK,IAAI,EAAE,CAAC;wBACZ,KAAK,GAAG,QAAQ,CAAC,QAAQ,CAAC;wBAC1B,MAAM;qBACT;oBACD,KAAK,OAAO,CAAC,KAAK,EAAE;wBAChB,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;wBAC1B,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAChB,KAAK,GAAG,EAAE,CAAC;wBACX,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;wBACvB,MAAM;qBACT;oBACD,KAAK,IAAI,EAAE;wBACP,IAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;wBACrC,KAAK,CAAC,IAAI,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;wBACzD,MAAM;qBACT;oBACD,KAAK,KAAK,EAAE;wBACR,IAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;wBACrC,KAAK,CAAC,IAAI,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;wBACzD,MAAM;qBACT;oBACD,KAAK,KAAK,EAAE;wBACR,KAAK,GAAG,UAAU,CAAC,KAAe,CAAC,CAAC;wBACpC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAChB,KAAK,GAAG,EAAE,CAAC;wBACX,KAAK,GAAG,QAAQ,CAAC,mBAAmB,CAAC;wBACrC,MAAM;qBACT;oBACD,SAAS;wBACL,IAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;wBACrC,KAAK,CAAC,IAAI,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;qBAC5D;iBACJ;gBACD,MAAM;aACT;YACD,KAAK,QAAQ,CAAC,WAAW,EAAE;gBACvB,QAAQ,EAAE;oBACN,KAAK,IAAI,EAAE;wBACP,KAAK,GAAG,QAAQ,CAAC,WAAW,CAAC;wBAC7B,MAAM;qBACT;oBACD,SAAS;wBACL,KAAK,IAAI,EAAE,CAAC;wBACZ,MAAM;qBACT;iBACJ;gBACD,MAAM;aACT;YACD,KAAK,QAAQ,CAAC,YAAY,EAAE;gBACxB,QAAQ,EAAE;oBACN,KAAK,KAAK,EAAE;wBACR,KAAK,GAAG,QAAQ,CAAC,YAAY,CAAC;wBAC9B,MAAM;qBACT;oBACD,SAAS;wBACL,KAAK,IAAI,EAAE,CAAC;wBACZ,MAAM;qBACT;iBACJ;gBACD,MAAM;aACT;YACD,KAAK,QAAQ,CAAC,YAAY,EAAE;gBACxB,QAAQ,EAAE;oBACN,KAAK,KAAK,EAAE;wBACR,KAAK,IAAI,EAAE,CAAC;wBACZ,KAAK,GAAG,QAAQ,CAAC,YAAY,CAAC;wBAC9B,MAAM;qBACT;oBACD,KAAK,OAAO,CAAC,KAAK,EAAE;wBAChB,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAChB,KAAK,GAAG,EAAE,CAAC;wBACX,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;wBACvB,MAAM;qBACT;oBACD,KAAK,EAAE,EAAE;wBACL,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAChB,KAAK,GAAG,EAAE,CAAC;wBACX,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACd,GAAG,GAAG,EAAE,CAAC;wBACT,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;wBACvB,MAAM;qBACT;oBACD,SAAS;wBACL,IAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;wBACrC,KAAK,CAAC,IAAI,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;qBAC5D;iBACJ;gBACD,MAAM;aACT;YACD,KAAK,QAAQ,CAAC,WAAW,EAAE;gBACvB,QAAQ,EAAE;oBACN,KAAK,IAAI,EAAE;wBACP,KAAK,IAAI,EAAE,CAAC;wBACZ,KAAK,GAAG,QAAQ,CAAC,WAAW,CAAC;wBAC7B,MAAM;qBACT;oBACD,KAAK,OAAO,CAAC,KAAK,EAAE;wBAChB,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAChB,KAAK,GAAG,EAAE,CAAC;wBACX,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;wBACvB,MAAM;qBACT;oBACD,KAAK,EAAE,EAAE;wBACL,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAChB,KAAK,GAAG,EAAE,CAAC;wBACX,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACd,GAAG,GAAG,EAAE,CAAC;wBACT,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;wBACvB,MAAM;qBACT;oBACD,SAAS;wBACL,IAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;wBACrC,KAAK,CAAC,IAAI,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;qBAC5D;iBACJ;gBACD,MAAM;aACT;YACD,KAAK,QAAQ,CAAC,KAAK,EAAE;gBACjB,QAAQ,EAAE;oBACN,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,EAAE;wBACN,KAAK,IAAI,EAAE,CAAC;wBACZ,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC;wBACzB,MAAM;qBACT;oBACD,KAAK,KAAK,EAAE;wBACR,MAAM;qBACT;oBACD,KAAK,IAAI,EAAE;wBACP,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC;wBACzB,MAAM;qBACT;oBACD,KAAK,KAAK,EAAE;wBACR,KAAK,IAAI,EAAE,CAAC;wBACZ,KAAK,GAAG,QAAQ,CAAC,gBAAgB,CAAC;wBAClC,MAAM;qBACT;oBACD,KAAK,KAAK,EAAE;wBACR,UAAU,GAAG,CAAC,CAAC;wBACf,KAAK,GAAG,QAAQ,CAAC,YAAY,CAAC;wBAC9B,MAAM;qBACT;oBACD,KAAK,IAAI,EAAE;wBACP,UAAU,GAAG,CAAC,CAAC;wBACf,KAAK,GAAG,QAAQ,CAAC,WAAW,CAAC;wBAC7B,MAAM;qBACT;oBACD,SAAS;wBACL,KAAK,IAAI,EAAE,CAAC;wBACZ,KAAK,GAAG,QAAQ,CAAC,eAAe,CAAC;qBACpC;iBACJ;gBACD,MAAM;aACT;YACD,KAAK,QAAQ,CAAC,YAAY,EAAE;gBACxB,QAAQ,EAAE;oBACN,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,EAAE;wBACN,KAAK,IAAI,EAAE,CAAC;wBACZ,MAAM;qBACT;oBACD,KAAK,EAAE,EAAE;wBACL,KAAK,GAAG,UAAU,CAAC,KAAe,CAAC,CAAC;wBACpC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAChB,KAAK,GAAG,EAAE,CAAC;wBACX,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACd,GAAG,GAAG,EAAE,CAAC;wBACT,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;wBACvB,MAAM;qBACT;oBACD,KAAK,EAAE,EAAE;;wBAEL,KAAK,GAAG,UAAU,CAAC,KAAe,CAAC,CAAC;wBACpC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAChB,KAAK,GAAG,EAAE,CAAC;wBACX,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACd,GAAG,GAAG,EAAE,CAAC;wBACT,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;wBACvB,MAAM;qBACT;oBACD,SAAS;wBACL,IAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;wBACrC,KAAK,CAAC,IAAI,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;qBAC5D;iBACJ;gBACD,MAAM;aACT;YACD,KAAK,QAAQ,CAAC,eAAe,EAAE;gBAC3B,QAAQ,EAAE;oBACN,KAAK,OAAO,CAAC,KAAK,EAAE;wBAChB,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAChB,KAAK,GAAG,EAAE,CAAC;wBACX,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;wBACvB,MAAM;qBACT;oBACD,KAAK,EAAE,EAAE;wBACL,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAChB,KAAK,GAAG,EAAE,CAAC;wBACX,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACd,GAAG,GAAG,EAAE,CAAC;wBACT,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;wBACvB,MAAM;qBACT;oBACD,KAAK,EAAE,EAAE;wBACL,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAChB,KAAK,GAAG,EAAE,CAAC;wBACX,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACd,GAAG,GAAG,EAAE,CAAC;wBACT,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;wBACvB,MAAM;qBACT;oBACD,SAAS;wBACL,KAAK,IAAI,EAAE,CAAC;qBACf;iBACJ;gBACD,MAAM;aACT;YACD,KAAK,QAAQ,CAAC,QAAQ,EAAE;gBACpB,QAAQ,EAAE;oBACN,KAAK,IAAI,CAAC;oBACV,KAAK,KAAK,EAAE;wBACR,KAAK,IAAI,EAAE,CAAC;wBACZ,KAAK,GAAG,QAAQ,CAAC,eAAe,CAAC;wBACjC,MAAM;qBACT;oBACD,KAAK,KAAK,EAAE;wBACR,KAAK,GAAG,UAAU,CAAC,KAAe,CAAC,CAAC;wBACpC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAChB,KAAK,GAAG,EAAE,CAAC;wBACX,KAAK,GAAG,QAAQ,CAAC,mBAAmB,CAAC;wBACrC,MAAM;qBACT;oBACD,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,EAAE;wBACN,KAAK,IAAI,EAAE,CAAC;wBACZ,MAAM;qBACT;oBACD,SAAS;wBACL,IAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;wBACrC,KAAK,CAAC,IAAI,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;qBAC5D;iBACJ;gBACD,MAAM;aACT;YACD,KAAK,QAAQ,CAAC,eAAe,EAAE;gBAC3B,QAAQ,EAAE;oBACN,KAAK,KAAK,EAAE;wBACR,KAAK,GAAG,UAAU,CAAC,KAAe,CAAC,CAAC;wBACpC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAChB,KAAK,GAAG,EAAE,CAAC;wBACX,KAAK,GAAG,QAAQ,CAAC,mBAAmB,CAAC;wBACrC,MAAM;qBACT;oBACD,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,EAAE;wBACN,KAAK,IAAI,EAAE,CAAC;wBACZ,MAAM;qBACT;oBACD,KAAK,EAAE,EAAE;wBACL,KAAK,GAAG,UAAU,CAAC,KAAe,CAAC,CAAC;wBACpC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAChB,KAAK,GAAG,EAAE,CAAC;wBACX,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACd,GAAG,GAAG,EAAE,CAAC;wBACT,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;wBACvB,MAAM;qBACT;oBACD,KAAK,EAAE,EAAE;wBACL,KAAK,GAAG,UAAU,CAAC,KAAe,CAAC,CAAC;wBACpC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAChB,KAAK,GAAG,EAAE,CAAC;wBACX,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACd,GAAG,GAAG,EAAE,CAAC;wBACT,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;wBACvB,MAAM;qBACT;oBACD,SAAS;wBACL,IAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;wBACrC,KAAK,CAAC,IAAI,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;qBAC5D;iBACJ;gBACD,MAAM;aACT;YACD,KAAK,QAAQ,CAAC,mBAAmB,EAAE;gBAC/B,QAAQ,EAAE;oBACN,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,CAAC;oBACT,KAAK,GAAG,EAAE;wBACN,IAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;wBACrC,KAAK,CAAC,IAAI,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;wBACzD,MAAM;qBACT;oBACD,SAAS;wBACL,IAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;wBACrC,KAAK,CAAC,IAAI,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;qBAC5D;iBACJ;gBACD,MAAM;aACT;YACD,SAAS;gBACL,MAAM,IAAI,KAAK,CAAC,mBAAhC,GAAoD,WAAW,CAAC,KAAK,CAAC,GAAtE,MAAA,GAA6E,CAAC,GAA9E,OAAA,GAAsF,CAAG,CAAC,CAAC;aAC9E;SACJ;KACJ;;IAGD,QAAQ,KAAK;QACT,KAAK,QAAQ,CAAC,OAAO,EAAE;;YAEnB,KAAK,GAAG,UAAU,CAAC,KAAe,CAAC,CAAC;YACpC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAChB,KAAK,GAAG,EAAE,CAAC;YACX,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACd,GAAG,GAAG,EAAE,CAAC;YACT,MAAM;SACT;QACD,KAAK,QAAQ,CAAC,OAAO,EAAE;;YAEnB,KAAK,GAAG,UAAU,CAAC,KAAe,CAAC,CAAC;YACpC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAChB,KAAK,GAAG,EAAE,CAAC;YACX,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACd,GAAG,GAAG,EAAE,CAAC;YACT,MAAM;SACT;QACD,KAAK,QAAQ,CAAC,QAAQ,CAAC;QACvB,KAAK,QAAQ,CAAC,eAAe,EAAE;;YAE3B,KAAK,GAAG,UAAU,CAAC,KAAe,CAAC,CAAC;YACpC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAChB,KAAK,GAAG,EAAE,CAAC;YACX,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACd,GAAG,GAAG,EAAE,CAAC;YACT,MAAM;SACT;QACD,KAAK,QAAQ,CAAC,WAAW,EAAE;;;YAGvB,KAAK,GAAG,UAAU,CAAC,KAAe,CAAC,CAAC;YACpC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAChB,KAAK,GAAG,EAAE,CAAC;YACX,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACd,GAAG,GAAG,EAAE,CAAC;YACT,MAAM;SACT;QACD,KAAK,QAAQ,CAAC,YAAY,EAAE;;;YAGxB,KAAK,GAAG,UAAU,CAAC,KAAe,CAAC,CAAC;YACpC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAChB,KAAK,GAAG,EAAE,CAAC;YACX,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACd,GAAG,GAAG,EAAE,CAAC;YACT,MAAM;SACT;QACD,KAAK,QAAQ,CAAC,YAAY,EAAE;;YAExB,KAAK,GAAG,UAAU,CAAC,KAAe,CAAC,CAAC;YACpC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAChB,KAAK,GAAG,EAAE,CAAC;YACX,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACd,GAAG,GAAG,EAAE,CAAC;YACT,MAAM;SACT;QACD,KAAK,QAAQ,CAAC,KAAK,EAAE;YACjB,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACf,KAAK,GAAG,EAAE,CAAC;YACX,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACd,GAAG,GAAG,EAAE,CAAC;YACT,MAAM;SACT;QACD,KAAK,QAAQ,CAAC,WAAW,EAAE;YACvB,IAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YACrC,KAAK,CAAC,IAAI,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;YAClE,MAAM;SACT;QACD,KAAK,QAAQ,CAAC,YAAY,EAAE;YACxB,IAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YACrC,KAAK,CAAC,IAAI,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;YAClE,MAAM;SACT;QACD,KAAK,QAAQ,CAAC,KAAK,EAAE;;YAEjB,MAAM;SACT;QACD,KAAK,QAAQ,CAAC,mBAAmB,EAAE;;YAE/B,MAAM;SACT;QACD,SAAS;YACL,MAAM,IAAI,KAAK,CAAC,uBAA5B,GAAoD,WAAW,CAAC,KAAK,CAAC,GAAtE,GAAA,GAA0E,CAAG,CAAC,CAAC;SACtE;KACJ;;IAGD,IAAI,OAAO,CAAC,QAAQ;QAAE,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAExD,OAAO,GAAG,CAAC;CACd;;;;;;;;;"}