{"version":3,"file":"index.js","sources":["../module/CodeWriter.js","../module/MappingTree.js","../module/Range.js","../module/Position.js","../module/MutableRange.js","../module/asserts.js","../module/MutablePosition.js"],"sourcesContent":["import { assert } from './asserts';\nimport { Position } from './Position';\nimport { Range } from './Range';\nimport { MutablePosition } from './MutablePosition';\nimport { MutableRange } from './MutableRange';\nimport { MappingTree } from './MappingTree';\nexport var IndentStyle;\n(function (IndentStyle) {\n    IndentStyle[IndentStyle[\"None\"] = 0] = \"None\";\n    IndentStyle[IndentStyle[\"Block\"] = 1] = \"Block\";\n    IndentStyle[IndentStyle[\"Smart\"] = 2] = \"Smart\";\n})(IndentStyle || (IndentStyle = {}));\nvar StackElement = (function () {\n    function StackElement(bMark, eMark, targetBeginLine, targetBeginColumn, trace) {\n        this.bMark = bMark;\n        this.eMark = eMark;\n        this.texts = [];\n        this.trees = [];\n        this.cursor = new MutablePosition(targetBeginLine, targetBeginColumn);\n    }\n    /**\n     *\n     */\n    StackElement.prototype.write = function (text, tree) {\n        assert(typeof text === 'string', \"text must be a string\");\n        this.texts.push(text);\n        this.trees.push(tree);\n        var cursor = this.cursor;\n        var beginLine = cursor.line;\n        var beginColumn = cursor.column;\n        var endLine = cursor.line;\n        var endColumn = beginColumn + text.length;\n        if (tree) {\n            tree.target.begin.line = beginLine;\n            tree.target.begin.column = beginColumn;\n            tree.target.end.line = endLine;\n            tree.target.end.column = endColumn;\n        }\n        cursor.line = endLine;\n        cursor.column = endColumn;\n    };\n    StackElement.prototype.snapshot = function () {\n        var texts = this.texts;\n        var trees = this.trees;\n        var N = texts.length;\n        if (N === 0) {\n            return this.package('', null);\n        }\n        else {\n            var sBL = Number.MAX_SAFE_INTEGER;\n            var sBC = Number.MAX_SAFE_INTEGER;\n            var sEL = Number.MIN_SAFE_INTEGER;\n            var sEC = Number.MIN_SAFE_INTEGER;\n            var tBL = Number.MAX_SAFE_INTEGER;\n            var tBC = Number.MAX_SAFE_INTEGER;\n            var tEL = Number.MIN_SAFE_INTEGER;\n            var tEC = Number.MIN_SAFE_INTEGER;\n            var children = [];\n            for (var i = 0; i < N; i++) {\n                var tree = trees[i];\n                if (tree) {\n                    sBL = Math.min(sBL, tree.source.begin.line);\n                    sBC = Math.min(sBC, tree.source.begin.column);\n                    sEL = Math.max(sEL, tree.source.end.line);\n                    sEC = Math.max(sEC, tree.source.end.column);\n                    tBL = Math.min(tBL, tree.target.begin.line);\n                    tBC = Math.min(tBC, tree.target.begin.column);\n                    tEL = Math.max(tEL, tree.target.end.line);\n                    tEC = Math.max(tEC, tree.target.end.column);\n                    children.push(tree);\n                }\n            }\n            var text = texts.join(\"\");\n            if (children.length > 1) {\n                var source = new Range(new Position(sBL, sBC), new Position(sEL, sEC));\n                var target = new MutableRange(new MutablePosition(tBL, tBC), new MutablePosition(tEL, tEC));\n                return this.package(text, new MappingTree(source, target, children));\n            }\n            else if (children.length === 1) {\n                return this.package(text, children[0]);\n            }\n            else {\n                return this.package(text, null);\n            }\n        }\n    };\n    StackElement.prototype.package = function (text, tree) {\n        return { text: text, tree: tree, targetEndLine: this.cursor.line, targetEndColumn: this.cursor.column };\n    };\n    StackElement.prototype.getLine = function () {\n        return this.cursor.line;\n    };\n    StackElement.prototype.getColumn = function () {\n        return this.cursor.column;\n    };\n    return StackElement;\n}());\nfunction IDXLAST(xs) {\n    return xs.length - 1;\n}\n/**\n *\n */\nvar Stack = (function () {\n    function Stack(begin, end, targetLine, targetColumn, trace) {\n        this.elements = [];\n        this.elements.push(new StackElement(begin, end, targetLine, targetColumn, trace));\n    }\n    Object.defineProperty(Stack.prototype, \"length\", {\n        get: function () {\n            return this.elements.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Stack.prototype.push = function (element) {\n        this.elements.push(element);\n    };\n    Stack.prototype.pop = function () {\n        return this.elements.pop();\n    };\n    Stack.prototype.write = function (text, tree) {\n        this.elements[IDXLAST(this.elements)].write(text, tree);\n    };\n    Stack.prototype.dispose = function () {\n        assert(this.elements.length === 1, \"stack length should be 1\");\n        var textAndMappings = this.elements[IDXLAST(this.elements)].snapshot();\n        this.pop();\n        assert(this.elements.length === 0, \"stack length should be 0\");\n        return textAndMappings;\n    };\n    Stack.prototype.getLine = function () {\n        return this.elements[IDXLAST(this.elements)].getLine();\n    };\n    Stack.prototype.getColumn = function () {\n        return this.elements[IDXLAST(this.elements)].getColumn();\n    };\n    return Stack;\n}());\n/**\n * A smart buffer for writing TypeScript code.\n */\nvar CodeWriter = (function () {\n    /**\n     * Determines the indentation.\n     */\n    // private indentLevel = 0;\n    /**\n     * Constructs a CodeWriter instance using the specified options.\n     */\n    function CodeWriter(beginLine, beginColumn, options, trace) {\n        if (options === void 0) { options = {}; }\n        if (trace === void 0) { trace = false; }\n        this.options = options;\n        this.trace = trace;\n        this.stack = new Stack('', '', beginLine, beginColumn, trace);\n    }\n    CodeWriter.prototype.assign = function (text, source) {\n        var target = new MutableRange(new MutablePosition(-3, -3), new MutablePosition(-3, -3));\n        var tree = new MappingTree(source, target, null);\n        this.stack.write(text, tree);\n    };\n    /**\n     * Writes a name (identifier).\n     * @param id The identifier string to be written.\n     * @param begin The position of the beginning of the name in the original source.\n     * @param end The position of the end of the name in the original source.\n     */\n    CodeWriter.prototype.name = function (id, source) {\n        if (source) {\n            var target = new MutableRange(new MutablePosition(-2, -2), new MutablePosition(-2, -2));\n            var tree = new MappingTree(source, target, null);\n            this.stack.write(id, tree);\n        }\n        else {\n            this.stack.write(id, null);\n        }\n    };\n    CodeWriter.prototype.num = function (text, source) {\n        if (source) {\n            var target = new MutableRange(new MutablePosition(-3, -3), new MutablePosition(-3, -3));\n            var tree = new MappingTree(source, target, null);\n            this.stack.write(text, tree);\n        }\n        else {\n            this.stack.write(text, null);\n        }\n    };\n    /**\n     * Currently defined to be for string literals in unparsed form.\n     */\n    CodeWriter.prototype.str = function (text, source) {\n        if (source) {\n            var target = new MutableRange(new MutablePosition(-23, -23), new MutablePosition(-23, -23));\n            var tree = new MappingTree(source, target, null);\n            this.stack.write(text, tree);\n        }\n        else {\n            this.stack.write(text, null);\n        }\n    };\n    CodeWriter.prototype.write = function (text, tree) {\n        this.stack.write(text, tree);\n    };\n    CodeWriter.prototype.snapshot = function () {\n        assert(this.stack.length === 1, \"stack length is not zero\");\n        return this.stack.dispose();\n    };\n    CodeWriter.prototype.binOp = function (binOp, source) {\n        var target = new MutableRange(new MutablePosition(-5, -5), new MutablePosition(-5, -5));\n        var tree = new MappingTree(source, target, null);\n        if (this.options.insertSpaceBeforeAndAfterBinaryOperators) {\n            this.space();\n            this.stack.write(binOp, tree);\n            this.space();\n        }\n        else {\n            this.stack.write(binOp, tree);\n        }\n    };\n    CodeWriter.prototype.comma = function (begin, end) {\n        if (begin && end) {\n            var source = new Range(begin, end);\n            var target = new MutableRange(new MutablePosition(-4, -4), new MutablePosition(-4, -4));\n            var tree = new MappingTree(source, target, null);\n            this.stack.write(',', tree);\n        }\n        else {\n            this.stack.write(',', null);\n        }\n        if (this.options.insertSpaceAfterCommaDelimiter) {\n            this.stack.write(' ', null);\n        }\n    };\n    CodeWriter.prototype.space = function () {\n        this.stack.write(' ', null);\n    };\n    CodeWriter.prototype.beginBlock = function () {\n        this.prolog('{', '}');\n    };\n    CodeWriter.prototype.endBlock = function () {\n        this.epilog(false);\n    };\n    CodeWriter.prototype.beginBracket = function () {\n        this.prolog('[', ']');\n    };\n    CodeWriter.prototype.endBracket = function () {\n        this.epilog(this.options.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets);\n    };\n    CodeWriter.prototype.beginObject = function () {\n        this.prolog('{', '}');\n    };\n    CodeWriter.prototype.endObject = function () {\n        this.epilog(this.options.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces);\n    };\n    CodeWriter.prototype.openParen = function () {\n        this.prolog('(', ')');\n    };\n    CodeWriter.prototype.closeParen = function () {\n        this.epilog(this.options.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis);\n    };\n    CodeWriter.prototype.beginQuote = function () {\n        this.prolog(\"'\", \"'\");\n    };\n    CodeWriter.prototype.endQuote = function () {\n        this.epilog(false);\n    };\n    CodeWriter.prototype.beginStatement = function () {\n        this.prolog('', ';');\n    };\n    CodeWriter.prototype.endStatement = function () {\n        this.epilog(false);\n    };\n    CodeWriter.prototype.prolog = function (bMark, eMark) {\n        var line = this.stack.getLine();\n        var column = this.stack.getColumn();\n        this.stack.push(new StackElement(bMark, eMark, line, column, this.trace));\n    };\n    CodeWriter.prototype.epilog = function (insertSpaceAfterOpeningAndBeforeClosingNonempty) {\n        var popped = this.stack.pop();\n        var textAndMappings = popped.snapshot();\n        var text = textAndMappings.text;\n        var tree = textAndMappings.tree;\n        // This is where we would be\n        // const line = textAndMappings.targetEndLine;\n        // const column = textAndMappings.targetEndColumn;\n        if (text.length > 0 && insertSpaceAfterOpeningAndBeforeClosingNonempty) {\n            this.write(popped.bMark, null);\n            this.space();\n            var rows = 0;\n            var cols = popped.bMark.length + 1;\n            if (tree) {\n                tree.offset(rows, cols);\n            }\n            this.write(text, tree);\n            this.space();\n            this.write(popped.eMark, null);\n        }\n        else {\n            this.write(popped.bMark, null);\n            var rows = 0;\n            var cols = popped.bMark.length;\n            if (tree) {\n                tree.offset(rows, cols);\n            }\n            this.write(text, tree);\n            this.write(popped.eMark, null);\n        }\n    };\n    return CodeWriter;\n}());\nexport { CodeWriter };\n","import { assert } from './asserts';\n/**\n * A tree that enables ranges in the source document to be mapped to ranges in the target document.\n * The ordering of child nodes is not defined.\n * In many cases the children will be in target order owing to the writing process.\n * TODO: For more efficient searching, children should be sorted in source order.\n */\nvar MappingTree = (function () {\n    /**\n     *\n     * @param source\n     * @param target\n     * @param children\n     */\n    function MappingTree(source, target, children) {\n        this.children = children;\n        assert(source, \"source must be defined\");\n        assert(target, \"target must be defined\");\n        this.source = source;\n        this.target = target;\n    }\n    MappingTree.prototype.offset = function (rows, cols) {\n        if (this.target) {\n            this.target.offset(rows, cols);\n        }\n        if (this.children) {\n            for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n                var child = _a[_i];\n                child.offset(rows, cols);\n            }\n        }\n    };\n    MappingTree.prototype.mappings = function () {\n        if (this.children) {\n            var maps = [];\n            for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n                var child = _a[_i];\n                for (var _b = 0, _c = child.mappings(); _b < _c.length; _b++) {\n                    var map = _c[_b];\n                    maps.push(map);\n                }\n            }\n            return maps;\n        }\n        else {\n            return [{ source: this.source, target: this.target }];\n        }\n    };\n    return MappingTree;\n}());\nexport { MappingTree };\n","import { assert } from './asserts';\nvar Range = (function () {\n    /**\n     *\n     */\n    function Range(begin, end) {\n        assert(begin, \"begin must be defined\");\n        assert(end, \"end must be defined\");\n        this.begin = begin;\n        this.end = end;\n    }\n    Range.prototype.toString = function () {\n        return this.begin + \" to \" + this.end;\n    };\n    return Range;\n}());\nexport { Range };\n","var Position = (function () {\n    /**\n     *\n     */\n    function Position(line, column) {\n        this.line = line;\n        this.column = column;\n    }\n    Position.prototype.toString = function () {\n        return \"[\" + this.line + \", \" + this.column + \"]\";\n    };\n    return Position;\n}());\nexport { Position };\nexport function positionComparator(a, b) {\n    if (a.line < b.line) {\n        return -1;\n    }\n    else if (a.line > b.line) {\n        return 1;\n    }\n    else {\n        if (a.column < b.column) {\n            return -1;\n        }\n        else if (a.column > b.column) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n}\n","import { assert } from './asserts';\nvar MutableRange = (function () {\n    /**\n     *\n     */\n    function MutableRange(begin, end) {\n        this.begin = begin;\n        this.end = end;\n        assert(begin, \"begin must be defined\");\n        assert(end, \"end must be defined\");\n        this.begin = begin;\n        this.end = end;\n    }\n    MutableRange.prototype.offset = function (rows, cols) {\n        this.begin.offset(rows, cols);\n        this.end.offset(rows, cols);\n    };\n    MutableRange.prototype.toString = function () {\n        return this.begin + \" to \" + this.end;\n    };\n    return MutableRange;\n}());\nexport { MutableRange };\n","/**\n * We're looking for something that is truthy, not just true.\n */\n/**\n * We're looking for something that is truthy, not just true.\n */ export function assert(condition, message) {\n    if (!condition) {\n        throw new Error(message);\n    }\n}\nexport function fail(message) {\n    assert(false, message);\n}\n","var MutablePosition = (function () {\n    function MutablePosition(line, column) {\n        this.line = line;\n        this.column = column;\n        // TODO\n    }\n    MutablePosition.prototype.offset = function (rows, cols) {\n        this.line += rows;\n        this.column += cols;\n    };\n    MutablePosition.prototype.toString = function () {\n        return \"[\" + this.line + \", \" + this.column + \"]\";\n    };\n    return MutablePosition;\n}());\nexport { MutablePosition };\n"],"names":["IndentStyle"],"mappings":"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"}