const NEWLINE = '\n'

export default function(options: {} = {}): string {
    const lines: string[] = []
    lines.push("import extend from './extend'")
    lines.push("import Vector from './Vector.spec'")
    lines.push("")
    lines.push("window['jasmine'] = jasmineRequire.core(jasmineRequire)")
    lines.push("")
    lines.push("jasmineRequire.html(window['jasmine'])")
    lines.push("")
    lines.push("const env = jasmine.getEnv()")
    lines.push("")
    lines.push("const jasmineInterface = jasmineRequire.interface(window['jasmine'], env)")
    lines.push("")
    lines.push("extend(window, jasmineInterface)")
    lines.push("")
    lines.push("const htmlReporter = new jasmine.HtmlReporter({")
    lines.push("  env: env,")
    lines.push("  getContainer: function() { return document.body },")
    lines.push("  createElement: function() { return document.createElement.apply(document, arguments) },")
    lines.push("  createTextNode: function() { return document.createTextNode.apply(document, arguments) },")
    lines.push("  timer: new jasmine.Timer()")
    lines.push("})")
    lines.push("")
    lines.push("env.addReporter(jasmineInterface.jsApiReporter)")
    lines.push("env.addReporter(htmlReporter)")
    lines.push("")
    lines.push("const specFilter = new jasmine.HtmlSpecFilter({")
    lines.push("  filterString: function() {")
    lines.push("    return void 0")
    lines.push("  }")
    lines.push("})")
    lines.push("")
    lines.push("env.specFilter = function(spec: jasmine.Spec) {")
    lines.push("  return specFilter.matches(spec.getFullName())")
    lines.push("}")
    lines.push("")
    lines.push("DomReady.ready(function() {")
    lines.push("  htmlReporter.initialize()")
    lines.push("  describe(\"Vector\", Vector)")
    lines.push("  env.execute()")
    lines.push("})")
    return lines.join(NEWLINE).concat(NEWLINE)
}
