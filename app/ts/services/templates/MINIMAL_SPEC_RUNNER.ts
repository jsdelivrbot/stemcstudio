const NEWLINE = '\n';

export default function (tabString: string): string {
    const _ = tabString;
    const lines: string[] = [];
    lines.push("//");
    lines.push("// Jasmine");
    lines.push("// Behavior-Driven JavaScript");
    lines.push("//");
    lines.push("// Jasmine is a behavior-driven development framework for testing JavaScript code.");
    lines.push("//");
    lines.push("// https://jasmine.github.io/pages/docs_home.html");
    lines.push("//");
    lines.push("// This module can be thought of as the test specification runner.");
    lines.push("//");
    lines.push("// It has three parts:");
    lines.push("// 1) Initialize Jasmine object and install it in global namespace.");
    lines.push("// 2) Initialize the HTML reporter.");
    lines.push("// 3) Describe the specs then execute the Jasmine runtime.");
    lines.push("//");
    lines.push("// Import test specification (spec) modules here. They should be functions.");
    lines.push("// The convention is to name the spec for xyz.ts as xyz.spec.ts");
    lines.push("// Then, when importing here, drop the spec in the variable name.");
    lines.push("// This makes the code here a bit cleaner.");
    lines.push("import Example from './Example.spec';");
    lines.push("");
    lines.push("(<any>window)['jasmine'] = jasmineRequire.core(jasmineRequire);");
    lines.push("");
    lines.push("jasmineRequire.html((<any>window)['jasmine']);");
    lines.push("");
    lines.push("const env = jasmine.getEnv();");
    lines.push("");
    lines.push("const jasmineInterface = jasmineRequire.interface((<any>window)['jasmine'], env);");
    lines.push("");
    lines.push("extend(window, jasmineInterface);");
    lines.push("");
    lines.push("const htmlReporter = new jasmine.HtmlReporter({");
    lines.push(_ + "env: env,");
    lines.push(_ + "getContainer: function() { return document.body; },");
    lines.push(_ + "createElement: function() { return document.createElement.apply(document, arguments); },");
    lines.push(_ + "createTextNode: function() { return document.createTextNode.apply(document, arguments); },");
    lines.push(_ + "timer: new jasmine.Timer()");
    lines.push("});");
    lines.push("");
    lines.push("env.addReporter(jasmineInterface.jsApiReporter);");
    lines.push("env.addReporter(htmlReporter);");
    lines.push("");
    lines.push("/**");
    lines.push(" *");
    lines.push(" */");
    lines.push("const specFilter = new jasmine.HtmlSpecFilter({");
    lines.push(_ + "filterString: function(): string {");
    lines.push(_ + _ + "// This seems to match the full specification anywhere.");
    lines.push(_ + _ + "return '';");
    lines.push(_ + "}");
    lines.push("});");
    lines.push("");
    lines.push("env.specFilter = function(spec: jasmine.Spec) {");
    lines.push(_ + "return specFilter.matches(spec.getFullName());");
    lines.push("};");
    lines.push("");
    lines.push("DomReady.ready(function() {");
    lines.push(_ + "htmlReporter.initialize();");
    lines.push("");
    lines.push(_ + "// describe each of your spec modules here...");
    lines.push(_ + 'describe("Example", Example);');
    lines.push("");
    lines.push(_ + "env.execute();");
    lines.push("});");
    lines.push("");
    lines.push("/*");
    lines.push(" * Helper function for extending the properties on objects.");
    lines.push(" */");
    lines.push("export default function extend<T>(destination: T, source: any): T {");
    lines.push(_ + "for (const property in source) {");
    lines.push(_ + _ + "if (source.hasOwnProperty(property)) {");
    lines.push(_ + _ + _ + "(<any>destination)[property] = source[property];");
    lines.push(_ + _ + "}");
    lines.push(_ + "}");
    lines.push(_ + "return destination;");
    lines.push("}");
    return lines.join(NEWLINE).concat(NEWLINE);
}
