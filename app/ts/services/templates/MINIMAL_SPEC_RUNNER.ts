const NEWLINE = '\n';

export default function (options: {}, tabString: string): string {
    const _ = tabString;
    const lines: string[] = [];
    lines.push("import Example from './Example.spec'");
    lines.push("");
    lines.push("window['jasmine'] = jasmineRequire.core(jasmineRequire)");
    lines.push("");
    lines.push("jasmineRequire.html(window['jasmine'])");
    lines.push("");
    lines.push("const env = jasmine.getEnv()");
    lines.push("");
    lines.push("const jasmineInterface = jasmineRequire.interface(window['jasmine'], env)");
    lines.push("");
    lines.push("extend(window, jasmineInterface)");
    lines.push("");
    lines.push("const htmlReporter = new jasmine.HtmlReporter({");
    lines.push(_ + "env: env,");
    lines.push(_ + "getContainer: function() { return document.body },");
    lines.push(_ + "createElement: function() { return document.createElement.apply(document, arguments) },");
    lines.push(_ + "createTextNode: function() { return document.createTextNode.apply(document, arguments) },");
    lines.push(_ + "timer: new jasmine.Timer()");
    lines.push("})");
    lines.push("");
    lines.push("env.addReporter(htmlReporter)");
    lines.push("");
    lines.push("DomReady.ready(function() {");
    lines.push(_ + "htmlReporter.initialize()");
    lines.push(_ + 'describe("Example", Example)');
    lines.push(_ + "env.execute()");
    lines.push("})");
    lines.push("");
    lines.push("/*");
    lines.push(" * Helper function for extending the properties on objects.");
    lines.push(" */");
    lines.push("export default function extend<T>(destination: T, source: any): T {");
    lines.push(_ + "for (let property in source) {");
    lines.push(_ + _ + "destination[property] = source[property]");
    lines.push(_ + "}");
    lines.push(_ + "return destination");
    lines.push("}");
    return lines.join(NEWLINE).concat(NEWLINE);
}
