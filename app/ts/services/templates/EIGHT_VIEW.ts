const NEWLINE = '\n';

export function EIGHT_VIEW(tabString: string): string {
    const _ = tabString;
    const lines: string[] = [];
    lines.push("import { Geometric3, Color } from 'davinci-eight'");
    lines.push("import { Engine, Capability, Diagram3D } from 'davinci-eight'");
    lines.push("import { Facet, PerspectiveCamera, DirectionalLight } from 'davinci-eight'");
    lines.push("import { TrackballControls } from 'davinci-eight'");
    lines.push("import { Box } from 'davinci-eight'");
    lines.push("import { Model } from './model'");
    lines.push("");
    lines.push("const e2 = Geometric3.e2(true)");
    lines.push("const e3 = Geometric3.e3(true)");
    lines.push("");
    lines.push("/**");
    lines.push(" *");
    lines.push(" */");
    lines.push("export class View {");
    lines.push(_ + "private engine: Engine");
    lines.push(_ + "private overlay: Diagram3D");
    lines.push(_ + "private camera: PerspectiveCamera");
    lines.push(_ + "private trackball: TrackballControls");
    lines.push(_ + "private dirLight: DirectionalLight");
    lines.push(_ + "private ambients: Facet[] = []");
    lines.push(_ + "private box: Box");
    lines.push(_ + "/**");
    lines.push(_ + " *");
    lines.push(_ + " */");
    lines.push(_ + "constructor(private model: Model, container: HTMLElement, width = 500, height = 500) {");
    lines.push("");
    lines.push(_ + _ + "const eCanvas = document.createElement('canvas')");
    lines.push(_ + _ + "eCanvas.style.position = 'absolute'");
    lines.push(_ + _ + "eCanvas.style.left = '0px'");
    lines.push(_ + _ + "eCanvas.style.top = '0px'");
    lines.push(_ + _ + "eCanvas.style.zIndex = '0'");
    lines.push(_ + _ + "eCanvas.width = width");
    lines.push(_ + _ + "eCanvas.height = height");
    lines.push(_ + _ + "container.appendChild(eCanvas)");
    lines.push("");
    lines.push(_ + _ + "this.engine = new Engine(eCanvas)");
    lines.push(_ + _ + _ + ".size(width, height)");
    lines.push(_ + _ + _ + ".clearColor(0.1, 0.1, 0.1, 1.0)");
    lines.push(_ + _ + _ + ".enable(Capability.DEPTH_TEST)");
    lines.push("");
    lines.push(_ + _ + "this.camera = new PerspectiveCamera()");
    lines.push(_ + _ + "this.camera.eye = e2 + 3 * e3");
    lines.push(_ + _ + "this.ambients.push(this.camera)");
    lines.push("");
    lines.push(_ + _ + "this.dirLight = new DirectionalLight()");
    lines.push(_ + _ + "this.ambients.push(this.dirLight)");
    lines.push("");
    lines.push(_ + _ + "this.trackball = new TrackballControls(this.camera)");
    lines.push(_ + _ + "this.trackball.subscribe(this.engine.canvas)");
    lines.push("");
    lines.push(_ + _ + "this.box = new Box(this.engine, { color: Color.blue })");
    lines.push("");
    lines.push(_ + _ + "const dCanvas = document.createElement('canvas')");
    lines.push(_ + _ + "dCanvas.style.position = 'absolute'");
    lines.push(_ + _ + "dCanvas.style.left = '0px'");
    lines.push(_ + _ + "dCanvas.style.top = '0px'");
    lines.push(_ + _ + "dCanvas.style.zIndex = '10'");
    lines.push(_ + _ + "dCanvas.style.pointerEvents = 'none'");
    lines.push(_ + _ + "dCanvas.width = width");
    lines.push(_ + _ + "dCanvas.height = height");
    lines.push(_ + _ + "container.appendChild(dCanvas)");
    lines.push("");
    lines.push(_ + _ + "this.overlay = new Diagram3D(dCanvas, this.camera)");
    lines.push(_ + "}");
    lines.push(_ + "/**");
    lines.push(_ + " *");
    lines.push(_ + " */");
    lines.push(_ + "draw() {");
    lines.push(_ + _ + "this.engine.clear()");
    lines.push(_ + _ + "this.overlay.clear()");
    lines.push("");
    lines.push(_ + _ + "this.trackball.update()");
    lines.push("");
    lines.push(_ + _ + "this.dirLight.direction.copyVector(this.camera.look).subVector(this.camera.eye)");
    lines.push("");
    lines.push(_ + _ + "this.box.position.copyVector(this.model.body.position)");
    lines.push(_ + _ + "this.box.attitude.rotorFromAxisAngle(e2, this.model.timestamp * 0.001)");
    lines.push("");
    lines.push(_ + _ + "this.box.render(this.ambients)");
    lines.push("");
    lines.push(_ + _ + 'this.overlay.fillText("Hello, World", this.model.body.position)');
    lines.push(_ + "}");
    lines.push("}");
    return lines.join(NEWLINE).concat(NEWLINE);
}
