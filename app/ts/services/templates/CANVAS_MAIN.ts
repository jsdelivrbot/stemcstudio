const NEWLINE = '\n';

export function CANVAS_MAIN(tabString: string): string {
    const _ = tabString;
    const lines: string[] = [];
    lines.push("import { Model } from './model'");
    lines.push("import { View } from './view'");
    lines.push("import { Keyboard } from './keyboard'");
    lines.push("");
    lines.push("const MILLIS_PER_SECOND = 1000");
    lines.push("");
    lines.push("const kbd = new Keyboard({ 37: 'left', 38: 'up', 39: 'right', 40: 'down' })");
    lines.push("");
    lines.push("const model = new Model()");
    lines.push("");
    lines.push("const view = new View(model, document.getElementById('container') as HTMLElement)");
    lines.push("");
    lines.push("const update = function(Δt: number) {");
    lines.push("");
    lines.push(_ + "if (kbd.pressed['right']) {");
    lines.push(_ + _ + "model.box.pos.x += 200 * Δt");
    lines.push(_ + "}");
    lines.push(_ + "if (kbd.pressed['left']) {");
    lines.push(_ + _ + "model.box.pos.x -= 200 * Δt");
    lines.push(_ + "}");
    lines.push(_ + "if (kbd.pressed['up']) {");
    lines.push(_ + _ + "model.box.pos.y -= 200 * Δt");
    lines.push(_ + "}");
    lines.push(_ + "if (kbd.pressed['down']) {");
    lines.push(_ + _ + "model.box.pos.y += 200 * Δt");
    lines.push(_ + "}");
    lines.push("}");
    lines.push("");
    lines.push("/**");
    lines.push(" * The timestamp for the previous animation frame.");
    lines.push(" */");
    lines.push("let then: number");
    lines.push("");
    lines.push("/**");
    lines.push(" * The first frame callback.");
    lines.push(" */");
    lines.push("const setup = function(now: number) {");
    lines.push(_ + "then = now");
    lines.push("");
    lines.push(_ + "model.box.pos.x = 0");
    lines.push(_ + "model.box.pos.y = 0");
    lines.push("");
    lines.push(_ + "animate(then)");
    lines.push("}");
    lines.push("");
    lines.push("/**");
    lines.push(" * The callback function for animation.");
    lines.push(" */");
    lines.push("const animate = function(now: number) {");
    lines.push("");
    lines.push(_ + "update((now - then) / MILLIS_PER_SECOND)");
    lines.push("");
    lines.push(_ + "view.draw()");
    lines.push("");
    lines.push(_ + "then = now");
    lines.push("");
    lines.push(_ + "// Request to do this again ASAP.");
    lines.push(_ + "window.requestAnimationFrame(animate)");
    lines.push("}");
    lines.push("");
    lines.push("window.onunload = () => {");
    lines.push(_ + "kbd.release()");
    lines.push("}");
    lines.push("");
    lines.push("// Let's get started!");
    lines.push("window.requestAnimationFrame(setup)");
    return lines.join(NEWLINE).concat(NEWLINE);
}
