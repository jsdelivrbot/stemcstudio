const NEWLINE = '\n';

export default function (tabString: string): string {
    const _ = tabString;
    const lines: string[] = [];
    lines.push("import {Geometric3, Color} from 'davinci-eight';");
    lines.push("import {Engine, Capability, Scene} from 'davinci-eight';");
    lines.push("import {Facet, PerspectiveCamera, DirectionalLight} from 'davinci-eight';");
    lines.push("import {TrackballControls} from 'davinci-eight';");
    lines.push("import {Box} from 'davinci-eight';");
    lines.push("");
    lines.push("const e2 = Geometric3.e2(true);");
    lines.push("const e3 = Geometric3.e3(true);");
    lines.push("");
    lines.push("const engine = new Engine('canvas3D')");
    lines.push(_ + ".size(500, 500)");
    lines.push(_ + ".clearColor(0.1, 0.1, 0.1, 1.0)");
    lines.push(_ + ".enable(Capability.DEPTH_TEST);");
    lines.push("");
    lines.push("const scene = new Scene(engine);");
    lines.push("");
    lines.push("const ambients: Facet[] = [];");
    lines.push("");
    lines.push("const camera = new PerspectiveCamera();");
    lines.push("camera.eye = e2 + 3 * e3;");
    lines.push("ambients.push(camera);");
    lines.push("");
    lines.push("const dirLight = new DirectionalLight();");
    lines.push("ambients.push(dirLight);");
    lines.push("");
    lines.push("const trackball = new TrackballControls(camera);");
    lines.push("trackball.subscribe(engine.canvas);");
    lines.push("");
    lines.push("const box = new Box(engine, {color: Color.blue});");
    lines.push("scene.add(box);");
    lines.push("");
    lines.push("const animate = function(timestamp: number) {");
    lines.push("");
    lines.push(_ + "engine.clear();");
    lines.push("");
    lines.push(_ + "trackball.update();");
    lines.push("");
    lines.push(_ + "dirLight.direction.copyVector(camera.look).subVector(camera.eye);");
    lines.push("");
    lines.push(_ + "box.attitude.rotorFromAxisAngle(e2, timestamp * 0.001);");
    lines.push("");
    lines.push(_ + "scene.render(ambients);");
    lines.push("");
    lines.push(_ + "requestAnimationFrame(animate);");
    lines.push("};");
    lines.push("");
    lines.push("requestAnimationFrame(animate);");
    return lines.join(NEWLINE).concat(NEWLINE);
}
