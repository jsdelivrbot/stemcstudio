export default function(width: number, height: number, canvasId: string, refChange: boolean, useStats: boolean): string {
  const lines = [
    "class MyApp extends EIGHT.SingleViewApp {",
    "  private cube = new EIGHT.Box({color: green, height: 0.2})",
    "  private ball = new EIGHT.Sphere({color: blue, radius: 0.1})",
    "  private controls = new EIGHT.TrackballControls(this.view.camera, this.window)",
    "  private gui = new dat.GUI()",
    "  private t = 0",
    "  private dt = 0",
    "  constructor() {",
    "    super({memcheck:true})",
    "  }",
    "  protected initialize(): void {",
    "    super.initialize()",
    "    this.view.camera.eye = 5 * e3 + 2 * e2",
    "    this.controls.synchronize()",
    "    const scene = this.view.scene",
    "    scene.add(this.cube)",
    "    scene.add(this.ball)",
    "    scene.release()",
    "    this.controls.subscribe(this.canvas)",
    "    this.gui.add(this, 'start')",
    "    this.gui.add(this, 'stop')",
    "    this.gui.add(this, 'reset')",
    "    this.gui.add(this, 'resetView')",
    "    this.animation.start()",
    "  }",
    "  protected animate(t: number): void {",
    "    this.t += this.dt",
    "    this.engine.clear()",
    "    this.controls.update()",
    "    const view = this.view",
    "    const camera = view.camera",
    "    view.dirLight.direction.copy(camera.look).sub(camera.eye)",
    "    this.ball.X = Math.cos(this.t) * e1 + Math.sin(this.t) * e3",
    "    view.draw()",
    "  }",
    "  protected destructor(): void {",
    "    this.controls.unsubscribe()",
    "    this.controls.release()",
    "    this.cube.release()",
    "    this.ball.release()",
    "    super.destructor()",
    "  }",
    "  public start() {",
    "    this.dt = 0.01",
    "  }",
    "  public stop() {",
    "    this.dt = 0",
    "  }",
    "  public reset() {",
    "    this.t = 0",
    "  }",
    "  public resetView() {",
    "    this.controls.reset()",
    "  }",
    "}",
    "new MyApp()",
    ""
  ]
  return lines.join('\n')
}