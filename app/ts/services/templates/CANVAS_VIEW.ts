const NEWLINE = '\n';

export function CANVAS_VIEW(tabString: string): string {
    const _ = tabString;
    const lines: string[] = [];
    lines.push("import { Model } from './model'");
    lines.push("import { Rectangle } from './model'");
    lines.push("");
    lines.push("/**");
    lines.push(" *");
    lines.push(" */");
    lines.push("export class View {");
    lines.push(_ + "private canvas: HTMLCanvasElement");
    lines.push(_ + "private context: CanvasRenderingContext2D");
    lines.push(_ + "/**");
    lines.push(_ + " *");
    lines.push(_ + " */");
    lines.push(_ + "constructor(private model: Model, container: HTMLElement, width = 500, height = 500) {");
    lines.push(_ + _ + "this.canvas = document.createElement('canvas')");
    lines.push(_ + _ + "this.canvas.width = width");
    lines.push(_ + _ + "this.canvas.height = height");
    lines.push(_ + _ + "container.appendChild(this.canvas)");
    lines.push(_ + _ + "this.context = this.canvas.getContext('2d') as CanvasRenderingContext2D");
    lines.push(_ + "}");
    lines.push(_ + "/**");
    lines.push(_ + " *");
    lines.push(_ + " */");
    lines.push(_ + "draw(): void {");
    lines.push(_ + _ + "const context = this.context");
    lines.push(_ + _ + "context.clearRect(0, 0, this.canvas.width, this.canvas.height)");
    lines.push("");
    lines.push(_ + _ + "const model = this.model");
    lines.push(_ + _ + "this.drawRectangle(model.rectangle)");
    lines.push(_ + _ + "this.drawRectangle(model.square)");
    lines.push(_ + "}");
    lines.push(_ + "/**");
    lines.push(_ + " *");
    lines.push(_ + " */");
    lines.push(_ + "drawRectangle(rectangle: Rectangle): void {");
    lines.push(_ + _ + "const context = this.context");
    lines.push(_ + _ + "if (typeof rectangle.fillStyle === 'string') {");
    lines.push(_ + _ + _ + "context.fillStyle = rectangle.fillStyle");
    lines.push(_ + _ + "}");
    lines.push(_ + _ + "else {");
    lines.push(_ + _ + _ + "context.fillStyle = 'gray'");
    lines.push(_ + _ + "}");
    lines.push(_ + _ + "context.fillRect(rectangle.pos.x, rectangle.pos.y, rectangle.width, rectangle.height)");
    lines.push(_ + "}");
    lines.push("}");
    return lines.join(NEWLINE).concat(NEWLINE);
}
