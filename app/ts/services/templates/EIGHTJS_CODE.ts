export default function(width: number, height: number, canvasId: string, refChange: boolean, useStats: boolean): string {
  const lines = [
    "EIGHT.refChange('start')",
    "",
    "class ModelController {",
    "  /**",
    "   * The amplitude.",
    "   */",
    "  public A = 3",
    "  /**",
    "   * The periodic time.",
    "   */",
    "  public T = 5",
    "  private _trail: EIGHT.Trail",
    "  private controls: EIGHT.CameraControls",
    "  constructor(controls: EIGHT.CameraControls, trail: EIGHT.Trail) {",
    "    this.controls = controls",
    "    this._trail = trail",
    "  }",
    "  /**",
    "   * The rotational velocity bivector.",
    "   */",
    "  get Ω() {",
    "    return τ * (1 / this.T) * e2 ^ e3",
    "  }",
    "  get trail() {",
    "    return this._trail.config.enabled",
    "  }",
    "  set trail(enabled: boolean) {",
    "    this._trail.config.enabled = enabled",
    "    if (!enabled) {",
    "      this._trail.erase()",
    "    }",
    "  }",
    "  reset(): void {",
    "    this.controls.reset()",
    "  }",
    "}",
    "",
    "const engine = new EIGHT.Engine()",
    "",
    "const scene = new EIGHT.Scene(engine)",
    "",
    "const ambients: EIGHT.Facet[] = []",
    "",
    "const camera = new EIGHT.PerspectiveCamera()",
    "camera.position.copy(e3 - e2).direction().scale(10)",
    "camera.up.copy(e3)",
    "ambients.push(camera)",
    "",
    "const dirLight = new EIGHT.DirectionalLight()",
    "ambients.push(dirLight)",
    "",
    "const controls = new EIGHT.CameraControls(camera)",
    "",
    "const arrow = new EIGHT.Arrow({color: white})",
    "scene.add(arrow)",
    "",
    "const cube = new EIGHT.Box({color: green, position: 2 * e1, width: 0.2})",
    "scene.add(cube)",
    "",
    "const helix = new EIGHT.Curve({",
    "  uSegments: 128,",
    "  aPosition: (u: number) => {",
    "  return cos(4 * τ * u) * e1 + sin(4 * τ * u) * e2 + 3 * u * e3",
    "  }",
    "})",
    "scene.add(helix)",
    "",
    "const grid = new EIGHT.Grid({uMin: -4, uMax: 4, uSegments: 8, vMin: -4, vMax: 4, vSegments: 8})",
    "grid.color = gray",
    "scene.add(grid)",
    "",
    "const ball = new EIGHT.Sphere({color: blue, radius: 0.1})",
    "scene.add(ball)",
    "",
    "const trail = new EIGHT.Trail(ball)",
    "",
    "const rod = new EIGHT.Cylinder({color: magenta, position: -2 * e1, length: 0.2, radius: 0.5})",
    "scene.add(rod)",
    "",
    "const stats = new Stats()",
    "stats.setMode(0)",
    "document.body.appendChild(stats.domElement)",
    "",
    "const model = new ModelController(controls, trail)",
    "",
    "/**",
    " * Initializes the WebGL context once the DOM is ready.",
    " */",
    "window.onload = function() {",
    `  const canvas = <HTMLCanvasElement>document.getElementById('${canvasId}')`,
    `  canvas.width = ${width}`,
    `  canvas.height = ${height}`,
    "",
    "  const gui = new dat.GUI()",
    "  gui.add(model, 'A', 0, 4)",
    "  gui.add(model, 'T', 1, 10)",
    "  gui.add(model, 'trail')",
    "  gui.add(model, 'reset')",
    "",
    "  engine.start(canvas)",
    "",
    "  controls.subscribe(canvas)",
    "",
    "  requestAnimationFrame(animate)",
    "}",
    "",
    "/**",
    " * Animates the scene.",
    " */",
    "function animate(timestamp: number) {",
    "  stats.begin()",
    "  requestAnimationFrame(animate)",
    "",
    "  engine.clear()",
    "",
    "  controls.update()",
    "",
    "  dirLight.direction.copy(camera.look).sub(camera.position)",
    "",
    "  const t = timestamp * 0.001",
    "",
    "  ball.position = model.A * (cos(τ * t / model.T) * e1 + sin(τ * t / model.T) * e3)",
    "  trail.snapshot()",
    "",
    "  cube.attitude = exp(-model.Ω * t/2)",
    "  rod.attitude = exp(-model.Ω * t/2)",
    "",
    "  arrow.position = rod.position",
    "  arrow.axis = rod.axis",
    "",
    "  scene.draw(ambients)",
    "",
    "  trail.draw(ambients)",
    "",
    "  stats.end()",
    "}",
    "",
    "/**",
    " * Free WebGL resources when the window is unloaded.",
    " */",
    "window.onunload = function() {",
    "",
    "    controls.unsubscribe()",
    "    controls.release()",
    "",
    "    engine.stop()",
    "    engine.release()",
    "",
    "    scene.release()",
    "    trail.release()",
    "",
    "    arrow.release()",
    "    ball.release()",
    "    cube.release()",
    "    grid.release()",
    "    helix.release()",
    "    rod.release()",
    "",
    "    EIGHT.refChange('stop')",
    "    EIGHT.refChange('dump')",
    "}",
    ""
  ]
  return lines.join('\n')
}