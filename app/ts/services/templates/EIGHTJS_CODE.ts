export default function(): string {
    const lines = [
        "//",
        "// Using the WebGLRenderer class for flexible development.",
        "//",
        "EIGHT.refChange('start')",
        "",
        "const renderer = new EIGHT.WebGLRenderer()",
        "renderer.clearColor(0.1, 0.1, 0.1, 1.0)",
        "",
        "const scene = new EIGHT.Scene()",
        "scene.subscribe(renderer)",
        "",
        "const ambients: EIGHT.Facet[] = []",
        "",
        "const camera = new EIGHT.PerspectiveCamera(45 * Math.PI / 180, 1, 0.1, 1000)",
        "camera.position.copy(7 * e3 + e2)",
        "ambients.push(camera)",
        "",
        "const dirLight = new EIGHT.DirectionalLight(-e3, EIGHT.Color.white)",
        "ambients.push(dirLight)",
        "",
        "const arrow = new EIGHT.Arrow()",
        "arrow.name = 'arrow'",
        "arrow.color = EIGHT.Color.fromRGB(0.6, 0.6, 0.6)",
        "arrow.length = 1",
        "scene.add(arrow)",
        "",
        "const cube = new EIGHT.Cuboid()",
        "cube.name = 'cube'",
        "cube.color = EIGHT.Color.green",
        "cube.width = 1",
        "cube.height = 1",
        "cube.depth = 1",
        "cube.X = 1.2 * e1",
        "scene.add(cube)",
        "",
        "const ball = new EIGHT.Sphere()",
        "ball.name = 'ball'",
        "ball.color = EIGHT.Color.blue",
        "ball.radius = 0.1",
        "scene.add(ball)",
        "",
        "const trail = new EIGHT.Trail(ball)",
        "trail.spacing = 15",
        "",
        "const rod = new EIGHT.Cylinder()",
        "rod.name = 'rod'",
        "rod.color = EIGHT.Color.magenta",
        "rod.radius = 0.5",
        "rod.length = 0.2",
        "rod.X = -1.2 * e1",
        "scene.add(rod)",
        "",
        "const stats = new Stats()",
        "stats.setMode(0)",
        "document.body.appendChild(stats.domElement)",
        "",
        "/**",
        " * The rotational velocity vector.",
        " */",
        "const ω = 2 * Math.PI * (1/10) * e1",
        "/**",
        " * The rotational velocity bivector.",
        " */",
        "const Ω = dual(ω)",
        "",
        "/**",
        " * Initializes the WebGL context once the DOM is ready.",
        " */",
        "window.onload = function() {",
        "  const canvas = <HTMLCanvasElement>document.getElementById('my-canvas')",
        "  // Set the pixel resolution of the canvas, which may differ from the style.",
        "  canvas.width = 600",
        "  canvas.height = 600",
        "",
        "  renderer.start(canvas)",
        "",
        "  animate()",
        "}",
        "",
        "/**",
        " * Animates the scene.",
        " */",
        "function animate() {",
        "  stats.begin()",
        "  requestAnimationFrame(animate)",
        "",
        "  renderer.clear()",
        "",
        "  const t = Date.now() * 0.001",
        "",
        "  ball.X = 2 * (cos(t) * e1 + sin(t) * e3)",
        "  trail.snapshot()",
        "",
        "  cube.R = exp(-Ω * t/2)",
        "  rod.R.copy(Ω).scale(t/2).exp()",
        "",
        "  arrow.X = rod.X",
        "  arrow.axis = rod.axis",
        "",
        "  scene.draw(ambients)",
        "",
        "  trail.draw(ambients)",
        "",
        "  stats.end()",
        "}",
        "",
        "/**",
        " * Free WebGL resources when the window is unloaded.",
        " */",
        "window.onunload = function() {",
        "",
        "    renderer.release()",
        "    scene.release()",
        "",
        "    arrow.release()",
        "    ball.release()",
        "    cube.release()",
        "    rod.release()",
        "",
        "    EIGHT.refChange('stop')",
        "    EIGHT.refChange('dump')",
        "}",
        ""
        ]
    return lines.join('\n')
}