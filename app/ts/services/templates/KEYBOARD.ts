const NEWLINE = '\n';

export function KEYBOARD(tabString: string): string {
    const _ = tabString;
    const lines: string[] = [];
    lines.push("/**");
    lines.push(" * A utility for recording the history of key presses.");
    lines.push(" * Reference counting is used to support sharing and DOM resource management.");
    lines.push(" */");
    lines.push("export class Keyboard {");
    lines.push(_ + "/**");
    lines.push(_ + " * A mapping from the decode string to a boolean indicating that the key is pressed.");
    lines.push(_ + " */");
    lines.push(_ + "public readonly pressed: { [decode: string]: boolean } = {}");
    lines.push(_ + "/**");
    lines.push(_ + " * The KeyboardEvent listener for keydown and keyup events.");
    lines.push(_ + " */");
    lines.push(_ + "private handler: (event: KeyboardEvent) => void");
    lines.push(_ + "/**");
    lines.push(_ + " * Keeps track of the number of references.");
    lines.push(_ + " * Used to manage DOM resources.");
    lines.push(_ + " */");
    lines.push(_ + "private refCount = 1");
    lines.push(_ + "/**");
    lines.push(_ + " * Constructs a Keyboard that maps the specified key codes to decodes.");
    lines.push(_ + " */");
    lines.push(_ + "constructor(codes: { [keyCode: number]: string }) {");
    lines.push(_ + _ + "this.handler = (event: KeyboardEvent) => {");
    lines.push(_ + _ + _ + "if (codes.hasOwnProperty(event.keyCode)) {");
    lines.push(_ + _ + _ + _ + "this.pressed[codes[event.keyCode]] = event.type === 'keydown'");
    lines.push(_ + _ + _ + _ + "event.preventDefault()");
    lines.push(_ + _ + _ + _ + "event.stopPropagation()");
    lines.push(_ + _ + _ + "}");
    lines.push(_ + _ + "}");
    lines.push(_ + _ + "window.addEventListener('keydown', this.handler)");
    lines.push(_ + _ + "window.addEventListener('keyup', this.handler)");
    lines.push(_ + "}");
    lines.push(_ + "/**");
    lines.push(_ + " * Increments the reference count.");
    lines.push(_ + " */");
    lines.push(_ + "addRef(): number {");
    lines.push(_ + _ + "this.refCount += 1");
    lines.push(_ + _ + "return this.refCount");
    lines.push(_ + "}");
    lines.push(_ + "/**");
    lines.push(_ + " * Decrements the reference count.");
    lines.push(_ + " * When the reference count falls to zero, the keyboard stops listening for events.");
    lines.push(_ + " */");
    lines.push(_ + "release(): number {");
    lines.push(_ + _ + "this.refCount -= 1");
    lines.push(_ + _ + "if (this.refCount === 0) {");
    lines.push(_ + _ + _ + "this.destructor()");
    lines.push(_ + _ + "}");
    lines.push(_ + _ + "return this.refCount");
    lines.push(_ + "}");
    lines.push(_ + "protected destructor(): void {");
    lines.push(_ + _ + "window.removeEventListener('keydown', this.handler)");
    lines.push(_ + _ + "window.removeEventListener('keyup', this.handler)");
    lines.push(_ + "}");
    lines.push("}");
    return lines.join(NEWLINE).concat(NEWLINE);
}
