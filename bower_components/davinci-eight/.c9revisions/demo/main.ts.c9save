{"ts":1404050297795,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"import e8 = require('src/eight');\n\n// Strategic alias names to reduce clutter.\nvar scalar = e8.scalarE3;\nvar vector = e8.vectorE3;\nvar cos = Math.cos;\nvar sin = Math.sin;\n\n// Assume pop-ups are not enabled until proven otherwise.\nvar popUpEnabled = false;\n\nvar glwin = window.open(\"\", \"\", \"width=800, height=600\");\n\nif (glwin) {\n    popUpEnabled = true;\n}\nelse {\n    glwin = window;\n    console.log(\"Pop-ups are currently blocked. You'll get more FPS in a Pop-up!\");\n}\n\nglwin.document.body.style.backgroundColor = \"202020\";\nglwin.document.body.style.overflow = \"hidden\";\nglwin.document.title = \"Visualizing Geometric Algebra with davinci-eight and WebGL\";\n\nvar scene = e8.scene();\n\nvar camera = e8.perspective(45, 1.0, 0.1, 100);\n\nvar renderer = e8.renderer();\n\nvar box = e8.mesh(e8.box());\nscene.add(box);\nbox.position = vector(-1.0, -0.5, -5.0);\nvar prism = e8.mesh(e8.prism());\nscene.add(prism);\nprism.position = vector(0.0, 0.0, -5.0);\n\nvar workbench = e8.workbench(renderer.canvas, renderer, camera, glwin);\n\nfunction setUp() {\n    workbench.setUp();\n    monitor.start();\n}\n\nvar B = e8.bivectorE3(0, 0, 1);\nvar angle = 0;\n\nfunction tick(t: number) {\n    var c = scalar(cos(angle / 2));\n    var s = scalar(sin(angle / 2));\n    var R = c.sub(B.mul(s));\n    box.attitude = prism.attitude = R;\n\n    renderer.render(scene, camera);\n    angle += 0.01;\n}\n\nfunction terminate(t: number) { return false; }\n\nfunction tearDown(e) {\n    monitor.stop();\n    if (popUpEnabled) {\n        glwin.close();\n    }\n    if (e) {\n        console.log(\"Error during animation: \" + e);\n    }\n    else {\n        console.log(\"Goodbye!\");\n        workbench.tearDown();\n        scene.tearDown();\n    }\n}\n\nvar runner = e8.animationRunner(tick, terminate, setUp, tearDown, glwin);\n\nfunction onContextLoss() {\n    runner.stop();\n    renderer.onContextLoss();\n    scene.onContextLoss();\n}\n\nfunction onContextGain(gl: WebGLRenderingContext) {\n    scene.onContextGain(gl);\n    renderer.onContextGain(gl);\n    renderer.context.clearColor(32 / 256, 32 / 256, 32 / 256, 1)\n    runner.start();\n}\n\nvar monitor = e8.contextMonitor(renderer.canvas, onContextLoss, onContextGain);\n\nonContextGain(renderer.context);\n"]],"start1":0,"start2":0,"length1":0,"length2":2176}]],"length":2176}
